# üì¶ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python
import os
import sys
import time
import struct
import shutil
import zipfile
import datetime
import socket
import math
import re
import logging
import json
from typing import Optional, List, Tuple, Dict, Any, Union
from collections import deque
import configparser
import webbrowser

if getattr(sys, "frozen", False):
    BASE_PATH = sys._MEIPASS
else:
    BASE_PATH = os.path.dirname(os.path.abspath(__file__))

# üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Qt API
os.environ['QT_API'] = 'pyside6'

APP_VERSION = "2.3.0"
STABLE_VERSION = "2.3.0"
GITHUB_REPO   = "NorfaRu/NorfaTelemtry"

# –î–õ–Ø –¢–û–ì–û –ß–¢–û–ë–´ –°–û–ë–†–ê–¢–¨ –§–ê–ô–õ –í –¢–ï–†–ú–ò–ù–ê–õ–ï:
# pyinstaller tw.py --onefile --windowed --icon=logo.ico --upx-dir=upx-5.0.0-win64 (–ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ 162 –º–± –≥–¥–µ-—Ç–æ —Ç–∞–∫)

from PySide6.QtCore import QPropertyAnimation, QObject, QMetaObject
from PySide6.QtGui  import QGuiApplication
from PySide6.QtWidgets import QMessageBox
from PySide6.QtQuickWidgets import QQuickWidget
from PySide6.QtCore import QUrl

from PySide6.QtGui import QShortcut
from PySide6.QtGui import QKeySequence

# üñºÔ∏è PySide6 ‚Äî –í–∏–¥–∂–µ—Ç—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QPushButton, QLabel, QStackedWidget, QFrame, QGridLayout,
    QSizePolicy, QTextEdit, QLineEdit, QCheckBox, QFileDialog, QScrollArea,
    QGraphicsDropShadowEffect, QSpinBox, QStatusBar, QProgressBar
)

from PySide6.QtGui    import QDrag, QMouseEvent, QDropEvent, QDragEnterEvent, QDragMoveEvent
from PySide6.QtCore   import QByteArray, QMimeData
from PySide6.QtWidgets import QPlainTextEdit, QComboBox

# üîÑ Qt Core ‚Äî –°–∏–≥–Ω–∞–ª—ã, –°–ª–æ—Ç—ã, –¢–∞–π–º–µ—Ä—ã, –ü–æ—Ç–æ–∫–∏
from qtpy.QtCore import (
    Qt, QThread, Signal, Slot, QTimer, QRect
)


# üé® Qt GUI ‚Äî –ì—Ä–∞—Ñ–∏–∫–∞ –∏ –°—Ç–∏–ª–∏
from qtpy.QtGui import (
    QPalette, QColor, QFont, QPainter, QPen, QConicalGradient
)

from PySide6.QtGui import QSyntaxHighlighter, QTextCharFormat
from PySide6.QtCore import QRegularExpression

# üìà Qt Charts ‚Äî –ì—Ä–∞—Ñ–∏–∫–∏
from qtpy.QtCharts import (
    QChart, QChartView, QLineSeries, QValueAxis
)

# üìä PyQtGraph ‚Äî –ë—ã—Å—Ç—Ä–∞—è 2D –∏ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
# --- –£–¥–∞–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç OpenGL --- 
# from pyqtgraph.opengl import MeshData

# === –ü–ê–†–ê–ú–ï–¢–†–´ –ü–ê–†–°–ï–†–ê ===
#DEBUG = False
PL, R0 = 1000, 4000
NAKLON, SMESHENIE = -0.7565, 1.269
SCALE = math.pow(10, -SMESHENIE / NAKLON)
STRUCT_FMT = "<2HIhI6hBHBH4h3fB3HB"  # 60 bytes

# === –¶–í–ï–¢–û–í–ê–Ø –°–•–ï–ú–ê ===
COLORS = {
    "bg_main": "#1a1a1a",         # Main background (darker)
    "bg_dark": "#121212",         # Sidebar/darker areas
    "bg_card": "#252525",         # Card backgrounds
    "bg_panel": "#202020",        # Panel backgrounds
    "accent": "#81c784",         # —Å–≤–µ—Ç–ª–æ-–∑–µ–ª—ë–Ω—ã–π
    "accent_darker": "#66bb6a",  # —á—É—Ç—å —Ç–µ–º–Ω–µ–µ
    "btn_normal": "#333333",      # Button normal state
    "btn_hover": "#444444",       # Button hover state
    "btn_active": "#555555",      # Button active state
    "text_primary": "#ffffff",    # Main text
    "text_secondary": "#aaaaaa",  # Secondary text
    "text_highlight": "#4fc3f7",  # Highlighted text (same as accent)
    "success": "#81c784",         # Success color
    "warning": "#ffb74d",         # Warning color
    "danger": "#e57373",          # Danger/error color
    "info": "#64b5f6",            # Info color
    "chart_grid": "#3a3a3a",      # Chart grid lines
    "chart_bg": "#242424"        # Chart background (slightly lighter than dark bg)
}

def version_tuple(v: str):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É 'v1.2.3' –∏–ª–∏ '1.2.3' –≤ –∫–æ—Ä—Ç–µ–∂ (1,2,3)."""
    try:
        return tuple(int(x) for x in v.lstrip('vV').split('.'))
    except:
        return ()

def check_for_update():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (True, download_url, latest_tag) –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è."""
        try:
            # Use a slightly longer timeout and allow redirects
            r = requests.get(f"https://api.github.com/repos/{GITHUB_REPO}/releases/latest", timeout=5, allow_redirects=True)
            r.raise_for_status() # Raises HTTPError for bad responses (4XX, 5XX)
            data = r.json()
            latest = data.get("tag_name", "")
            # Ensure version comparison works even if tags have 'v' prefix
            if latest and version_tuple(latest) > version_tuple(APP_VERSION):
                for asset in data.get("assets", []):
                    # Look specifically for .exe files
                    if asset.get("name", "").lower().endswith(".exe"):
                        url = asset.get("browser_download_url")
                        if url:
                            print(f"[Update] Found new version {latest} at {url}")
                            return True, url, latest
                        else:
                            print("[Update] Found .exe asset but no download URL.")
                print(f"[Update] Found new version {latest} but no suitable .exe asset.")
            else:
                 print(f"[Update] No new version found (Current: {APP_VERSION}, Latest on GitHub: {latest})")

        except requests.exceptions.Timeout:
            print("[Update Check Error] Request timed out.")
        except requests.exceptions.ConnectionError as e:
            print(f"[Update Check Error] Connection error: {e}")
        except requests.exceptions.HTTPError as e:
            print(f"[Update Check Error] HTTP error: {e.response.status_code} {e.response.reason}")
        except requests.exceptions.JSONDecodeError:
            print("[Update Check Error] Failed to parse JSON response from GitHub API.")
        except Exception as e:
            # Catch any other unexpected errors during the update check
            print(f"[Update Check Error] An unexpected error occurred: {e}")

        return False, "", ""

import requests # Make sure requests is imported near the top
import tempfile # Make sure tempfile is imported near the top
import textwrap # Make sure textwrap is imported near the top
import ctypes   # Make sure ctypes is imported near the top

class UpdateThread(QThread):
        step = Signal(str)
        progress = Signal(int, int)
        finished = Signal(bool, str)  # (success, error_message)
        # Signal emitted right before quitting the app to apply update
        update_starting = Signal(str)

        def __init__(self, download_url, parent=None):
            super().__init__(parent)
            self.download_url = download_url

        def run(self):
            temp_dir = tempfile.gettempdir()
            # Use a more unique name for the downloaded file
            timestamp = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
            new_exe_path = os.path.join(temp_dir, f"tw_update_{timestamp}.exe")
            # Use PowerShell script instead of batch
            updater_script_path = os.path.join(temp_dir, f"tw_updater_{timestamp}.ps1")
            log_file_path = os.path.join(temp_dir, f"tw_update_{timestamp}.log") # Log for the script

            try:
                # 1) Download the update
                self.step.emit("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è‚Ä¶")
                # Use requests for downloading as well, provides better control
                with requests.get(self.download_url, stream=True, timeout=30, allow_redirects=True) as r:
                    r.raise_for_status()
                    total_size = int(r.headers.get('content-length', 0))
                    downloaded_size = 0

                    dl_mb = total_size / (1024 * 1024) if total_size else 0
                    self.step.emit(f"–†–∞–∑–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {dl_mb:.2f} –ú–ë")

                    with open(new_exe_path, 'wb') as f:
                        for chunk in r.iter_content(chunk_size=8192):
                            if chunk: # filter out keep-alive new chunks
                                f.write(chunk)
                                downloaded_size += len(chunk)
                                if total_size > 0:
                                    self.progress.emit(downloaded_size, total_size)

                dl_done_mb = downloaded_size / (1024 * 1024)
                self.step.emit(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {dl_done_mb:.2f} –ú–ë")

                # 2) Prepare the PowerShell updater script
                self.step.emit("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞‚Ä¶")
                # Determine the correct path for the current executable
                if getattr(sys, 'frozen', False):
                    # If running as a bundled app (pyinstaller)
                    current_exe = sys.executable
                else:
                     # If running as a script
                    current_exe = os.path.abspath(sys.argv[0])

                pid = os.getpid()

                powershell_script = textwrap.dedent(f"""
                param(
                    [Parameter(Mandatory=$true)][int]$PidToWait,
                    [Parameter(Mandatory=$true)][string]$NewExePath,
                    [Parameter(Mandatory=$true)][string]$TargetExePath,
                    [Parameter(Mandatory=$true)][string]$LogFilePath
                )

                function Write-Log($message) {{
                    "[{{0}}] $message" -f (Get-Date -Format 'yyyy-MM-dd HH:mm:ss') | Out-File -Append -Encoding UTF8 -FilePath $LogFilePath
                }}

                Write-Log "Updater script started."
                Write-Log " - NewExe: $NewExePath"
                Write-Log " - Target: $TargetExePath"
                Write-Log " - Log: $LogFilePath"
                Write-Log "Waiting for main process (PID: $PidToWait) to exit..."

                $process = Get-Process -Id $PidToWait -ErrorAction SilentlyContinue
                if ($process) {{
                    Wait-Process -Id $PidToWait -Timeout 30 # Wait up to 30 seconds
                    Start-Sleep -Milliseconds 500 # Brief pause after process *should* have exited
                    $process = Get-Process -Id $PidToWait -ErrorAction SilentlyContinue # Check again
                    if ($process) {{
                        Write-Log "Error: Main process did not exit within 30 seconds. Attempting to terminate."
                        try {{ Stop-Process -Id $PidToWait -Force -ErrorAction Stop }} catch {{ Write-Log "Failed to terminate process: $($_.Exception.Message)"}}
                        Start-Sleep -Milliseconds 500 # Pause after trying termination
                    }} else {{
                         Write-Log "Main process exited."
                    }}
                }} else {{
                    Write-Log "Main process (PID: $PidToWait) already exited or not found."
                }}

                # Extra check for file existence
                if (-not (Test-Path $NewExePath)) {{
                    Write-Log "Error: Downloaded file $NewExePath not found!"
                    Exit 1
                }}
                 if (-not (Test-Path $TargetExePath)) {{
                    Write-Log "Warning: Target file $TargetExePath not found (might be running from unexpected location?). Update will still proceed to place new file."
                    # Consider if this case should abort
                }}


                Write-Log "Attempting to replace '$TargetExePath' with '$NewExePath'..."

                try {{
                    # Ensure target directory exists
                    $TargetDir = Split-Path $TargetExePath -Parent
                    if (-not (Test-Path $TargetDir)) {{
                        Write-Log "Creating target directory: $TargetDir"
                        New-Item -ItemType Directory -Path $TargetDir -Force | Out-Null
                    }}
                    Move-Item -Path $NewExePath -Destination $TargetExePath -Force -ErrorAction Stop
                    Write-Log "Update successful: '$TargetExePath' replaced."
                }} catch {{
                    Write-Log "Error replacing file: $($_.Exception.Message)"
                    # Attempt to clean up the downloaded file even on error
                    if (Test-Path $NewExePath) {{ Remove-Item -Path $NewExePath -Force -ErrorAction SilentlyContinue }}
                    Write-Log "Update failed."
                    Exit 1 # Indicate failure
                }}

                Write-Log "Attempting to start the new version: '$TargetExePath'"
                try {{
                    Start-Process -FilePath $TargetExePath -WorkingDirectory (Split-Path $TargetExePath -Parent) -ErrorAction Stop
                    Write-Log "New version started."
                }} catch {{
                    Write-Log "Error starting new version: $($_.Exception.Message)"
                    # Don't exit here, let the script clean up first
                }}

                Write-Log "Update process finished. Cleaning up updater script..."
                # Self-delete the script
                Remove-Item -Path $MyInvocation.MyCommand.Path -Force -ErrorAction SilentlyContinue
                Exit 0 # Indicate success
                """)

                # Write the script file
                with open(updater_script_path, "w", encoding="utf-8") as f:
                    f.write(powershell_script)
                self.step.emit("–£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –≥–æ—Ç–æ–≤.")

                # 3) Launch the PowerShell script (potentially elevated)
                self.step.emit("–ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)‚Ä¶")
                try:
                    # Command to execute: powershell.exe -ExecutionPolicy Bypass -File "<script_path>" -PidToWait <pid> -NewExePath "<new_exe>" -TargetExePath "<current_exe>" -LogFilePath "<log_path>"
                    command_line = f'-ExecutionPolicy Bypass -File "{updater_script_path}" -PidToWait {pid} -NewExePath "{new_exe_path}" -TargetExePath "{current_exe}" -LogFilePath "{log_file_path}"'

                    # Use ShellExecuteW to request elevation if needed ('runas')
                    ret = ctypes.windll.shell32.ShellExecuteW(
                        None,
                        "runas",        # Verb: requests elevation
                        "powershell.exe", # Executable
                        command_line,   # Command line arguments
                        None,           # Working directory (None for current)
                        1               # Show command (SW_SHOWNORMAL)
                    )

                    # Check return code: > 32 indicates success in launching
                    if ret > 32:
                        self.step.emit("–£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è.")
                        # Emit signal *before* quitting
                        self.update_starting.emit("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
                        # Initiate clean application shutdown
                        QTimer.singleShot(500, QApplication.quit) # Short delay before quitting
                    else:
                        # User might have cancelled UAC prompt or other error
                        error_code = ctypes.get_last_error() # Get error if ShellExecute failed intrinsically
                        error_map = { 0: "The operating system is out of memory or resources.", 2: "The specified file was not found.", 3: "The specified path was not found.", 5: "Access denied.", 8: "Not enough memory resources are available to process this command.", 31: "No application is associated with the specified file name extension.", 1155: "No application is associated (alternate code).", 1223: "The operation was canceled by the user (UAC prompt)." }
                        error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫. –ö–æ–¥ –æ—à–∏–±–∫–∏: {ret} (WinErr: {error_code} - {error_map.get(error_code, 'Unknown error')})"
                        print(f"[Update Error] {error_msg}")
                        self.step.emit(error_msg)
                        # Clean up downloaded file if script launch failed
                        if os.path.exists(new_exe_path): os.remove(new_exe_path)
                        if os.path.exists(updater_script_path): os.remove(updater_script_path)
                        self.finished.emit(False, error_msg)

                except Exception as e:
                     # Catch errors during script launch preparation/execution call
                    error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞: {e}"
                    print(f"[Update Error] {error_msg}")
                    self.step.emit(error_msg)
                    # Clean up downloaded file
                    if os.path.exists(new_exe_path): os.remove(new_exe_path)
                    if os.path.exists(updater_script_path): os.remove(updater_script_path)
                    self.finished.emit(False, error_msg)

            except requests.exceptions.RequestException as e:
                error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}"
                print(f"[Update Error] {error_msg}")
                self.step.emit(error_msg)
                # Clean up potentially partially downloaded file
                if os.path.exists(new_exe_path): os.remove(new_exe_path)
                self.finished.emit(False, error_msg)
            except IOError as e:
                error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}"
                print(f"[Update Error] {error_msg}")
                self.step.emit(error_msg)
                if os.path.exists(new_exe_path): os.remove(new_exe_path)
                self.finished.emit(False, error_msg)
            except Exception as e:
                # Generic catch-all for other errors during the process
                error_msg = f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}"
                print(f"[Update Error] {error_msg}")
                self.step.emit(error_msg)
                # Clean up any temp files if they exist
                if os.path.exists(new_exe_path): os.remove(new_exe_path)
                if os.path.exists(updater_script_path): os.remove(updater_script_path)
                self.finished.emit(False, error_msg)

@Slot(str, str)
def _prompt_update(self, latest, url): # Keep url argument for compatibility, but don't use it directly for download
    mb = QMessageBox(self)
    mb.setWindowTitle("–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
    mb.setText(f"–ù–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è {latest} (—É –≤–∞—Å {APP_VERSION}). –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–≥—Ä—É–∑–∫–∏?") # Changed text slightly
    mb.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
    reply = mb.exec()
    if reply == QMessageBox.Yes:
        # Open the GitHub releases page in the browser
        releases_url = f"https://github.com/{GITHUB_REPO}/releases"
        print(f"[Splash] Opening GitHub releases page: {releases_url}")
        try:
            webbrowser.open(releases_url)
            self.loading_step.emit("–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ‚Ä¶") # Update status briefly
        except Exception as e:
            print(f"[Splash] Error opening browser: {e}")
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä. –ü–æ—Å–µ—Ç–∏—Ç–µ:\n{releases_url}")
        # Proceed to launch the main application after opening the browser or showing error
        self._launch_main()

        # Remove the old UpdateThread logic:
        # # –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø–æ–∫–∞–∑–∞—Ç—å –±–∞—Ä
        # self.update_pb.setValue(0)
        # self.update_pb.show()
        #
        # self.upd_thread = UpdateThread(url) # url is the specific asset download URL, which we no longer use directly here
        # # —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —à–∞–≥–∏ –Ω–∞ —Å—Ç–∞—Ç—É—Å-–ª–µ–π–±–ª
        # self.upd_thread.step.connect(self.loading_step)
        # # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        # self.upd_thread.progress.connect(
        #     lambda done, total: self.update_pb.setValue(int(done * 100 / total) if total else 0)
        # )
        # # –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ *–Ω–µ—É–¥–∞—á–Ω–æ–≥–æ* –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚Äî —Å–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
        # self.upd_thread.finished.connect(self._on_update_finished)
        # # –ö–æ–≥–¥–∞ —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω, –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
        # self.upd_thread.update_starting.connect(self.loading_step) # Update status label
        # # Add a specific connection for the final message before quit
        # self.upd_thread.update_starting.connect(lambda msg: print(f"[Splash] {msg}"))
        # self.upd_thread.start()
        # # Don't return here, let the splash screen stay visible until update starts or fails
    else:
        print("[Splash] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
        self._launch_main()

class SpinnerWidget(QWidget):
    def __init__(self, parent=None, radius=20, line_width=4):
        super().__init__(parent)
        self.radius = radius
        self.line_width = line_width
        self.angle = 0
        self.timer = QTimer(self)
        self.timer.timeout.connect(self._on_timeout)
        self.timer.start(150)
        self.setFixedSize(radius * 2 + line_width * 2, radius * 2 + line_width * 2)

    def _on_timeout(self):
        self.angle = (self.angle + 60) % 360 # <--- –£–≤–µ–ª–∏—á–µ–Ω —à–∞–≥ —É–≥–ª–∞
        self.update()

    def paintEvent(self, event):
        p = QPainter(self)
        p.setRenderHint(QPainter.Antialiasing)
        rect = self.rect().adjusted(self.line_width // 2, self.line_width // 2, -self.line_width // 2, -self.line_width // 2)
        center = rect.center()

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–∏—á–µ—Å–∫–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        gradient = QConicalGradient(center, self.angle)
        gradient.setColorAt(0.0, QColor(COLORS["accent"]))       # –ù–∞—á–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç (—è—Ä–∫–∏–π)
        gradient.setColorAt(0.75, QColor(COLORS["accent"]))      # –¢–æ—Ç –∂–µ —Ü–≤–µ—Ç –¥–æ 3/4 –∫—Ä—É–≥–∞
        gradient.setColorAt(1.0, QColor(COLORS["bg_panel"]))    # –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–æ–Ω—É –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–µ—Ç–≤–µ—Ä—Ç–∏

        # –†–∏—Å—É–µ–º –∫—Ä—É–≥ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        pen = QPen(gradient, self.line_width)
        pen.setCapStyle(Qt.RoundCap)
        p.setPen(pen)
        p.drawEllipse(rect) # –†–∏—Å—É–µ–º –ø–æ–ª–Ω—ã–π —ç–ª–ª–∏–ø—Å —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º –ø–µ—Ä–æ–º

class SplashScreen(QWidget):
    loading_step = Signal(str)      # —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞

    def __init__(self, config=None):
        super().__init__()
        self.config = config or {}
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)
        self.setAttribute(Qt.WA_TranslucentBackground)

        # –≥–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ —Å—Ç–∏–ª–µ–º –∏–∑ –≤–∞—à–µ–π —Ç–µ–º—ã
        
        shadow = QGraphicsDropShadowEffect(self)
        shadow.setBlurRadius(30)
        shadow.setOffset(0, 6)
        shadow.setColor(QColor(0,0,0,180))
        main.setGraphicsEffect(shadow)

        v = QVBoxLayout(main)
        v.setContentsMargins(30,30,30,30)
        v.setSpacing(15)

        title = QLabel("GRIB Telemetry Dashboard")
        title.setFont(QFont("Segoe UI", 24, QFont.Bold))
        title.setStyleSheet(f"color: {COLORS['accent']};")
        title.setAlignment(Qt.AlignCenter)
        v.addWidget(title)

        self.spinner = SpinnerWidget(self, radius=30, line_width=6)
        v.addWidget(self.spinner, alignment=Qt.AlignCenter)

        # –∑–¥–µ—Å—å –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å, —á—Ç–æ –≥—Ä—É–∑–∏–º
        self.status_label = QLabel("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞‚Ä¶")
        self.status_label.setFont(QFont("Segoe UI", 10))
        self.status_label.setStyleSheet(f"color: {COLORS['text_secondary']};")
        self.status_label.setAlignment(Qt.AlignCenter)
        # + –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫, —á—Ç–æ–±—ã –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–ª–µ–∑–∞–ª
        self.status_label.setWordWrap(True)
        v.addWidget(self.status_label)
        # –Ω–∏–∂–µ self.status_label: –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.update_pb = QProgressBar()
        self.update_pb.setRange(0, 100)
        self.update_pb.setValue(0)
        # –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç %p%
        self.update_pb.setTextVisible(True)
        self.update_pb.setFormat("%p%")
        v.addWidget(self.update_pb)
        self.update_pb.hide()

        # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞, —á—Ç–æ–±—ã –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ —Ç–µ–∫—Å—Ç –≤–ª–µ–∑–∞–ª–∏
        self.resize(700, 450)
        # —Å—Ä–∞–∑—É —Å—Ç–∞–≤–∏–º "main" –Ω–∞ –≤–µ—Å—å —Ä–∞–∑–º–µ—Ä —Å–ø–ª—ç—à–∞
        main.resize(self.size())
        main.move(0, 0)

        # –ø–æ–¥–ø–∏—à–µ–º—Å—è –Ω–∞ —à–∞–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        self.loading_step.connect(self.status_label.setText)

        # + –°–æ–∑–¥–∞—ë–º MainWindow —Å—Ä–∞–∑—É –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º)
        self.main = MainWindow(self.config)  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ MainWindow
        # + –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ (—Ç–æ–ª—å–∫–æ –Ω–µ-UI!) —á–µ—Ä–µ–∑ InitWorker
        QTimer.singleShot(100, self._start_initialization)

    def show(self):
        super().show()
        self.center()
    def center(self):
        screen = QGuiApplication.primaryScreen().availableGeometry()
        geom   = self.frameGeometry()
        geom.moveCenter(screen.center())
        self.move(geom.topLeft())
        # –ø–æ–¥–≥–æ–Ω—è–µ–º –≥–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
        if hasattr(self, 'update_pb'):
            # main —É–∂–µ –ø–æ–¥–æ–≥–Ω–∞–Ω –≤ __init__, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            for w in self.children():
                if isinstance(w, QWidget) and w is not self:
                    w.resize(self.size()); w.move(0, 0)

    def _start_initialization(self):
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã UI —Å–ø–∏–Ω–Ω–µ—Ä–∞ –Ω–µ –ø–æ–¥–≤–∏—Å
        self.init_thread = QThread()
        # + –ü–µ—Ä–µ–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –æ–∫–Ω–æ –≤ InitWorker
        self.init_worker = InitWorker(self.main)
        self.init_worker.moveToThread(self.init_thread)
        self.init_worker.step.connect(self.loading_step)
        self.init_worker.finished.connect(self._on_init_finished)
        self.init_thread.started.connect(self.init_worker.run)
        self.init_thread.start()

    @Slot(str, str)
    def _prompt_update(self, latest, url):
        mb = QMessageBox(self)
        mb.setWindowTitle("–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        mb.setText(f"–ù–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è {latest} (—É –≤–∞—Å {APP_VERSION}). –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–≥—Ä—É–∑–∫–∏?")
        mb.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        reply = mb.exec()
        if reply == QMessageBox.Yes:
            # Open the GitHub releases page in the browser
            releases_url = f"https://github.com/{GITHUB_REPO}/releases"
            print(f"[Splash] Opening GitHub releases page: {releases_url}")
            try:
                webbrowser.open(releases_url)
                self.loading_step.emit("–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ‚Ä¶")
            except Exception as e:
                print(f"[Splash] Error opening browser: {e}")
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä. –ü–æ—Å–µ—Ç–∏—Ç–µ:\n{releases_url}")
            # Proceed to launch the main application after opening the browser or showing error
            self._launch_main()
        else:
            print("[Splash] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
            self._launch_main()

    @Slot(object)
    def _on_init_finished(self):
        print("[Splash] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–∫–æ–Ω—á–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è‚Ä¶")
        self.init_thread.quit()
        self.init_thread.wait()

        avail, url, tag = check_for_update()
        if avail:
            print(f"[Splash] –ï—Å—Ç—å –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è {tag}, –ø–µ—Ä–µ–¥–∞—ë–º –≤ _prompt_update")
            self._prompt_update(tag, url)
            return

        print("[Splash] –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ")
        self._launch_main()

    @Slot(bool, str)
    def _on_update_finished(self, success: bool, msg: str):
        print(f"[Splash] UpdateThread finished signal received: success={success}, msg={msg}")
        self.update_pb.hide()
        if not success:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", msg)
            # If update failed, proceed to launch the current version
            print("[Splash] Update failed, launching current version.")
            self._launch_main()
        # If success=True, it means the script was launched and the app will quit separately via update_starting signal + QTimer.
        # No need to call _launch_main() here in the success case.

    def _launch_main(self):
        print("[SplashScreen] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–ª–∞–≤–Ω–æ–º—É –æ–∫–Ω—É.")
        self.close()
        self.main.worker.start()
        self.main.show()

    def showEvent(self, event):
        super().showEvent(event)
        # —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å–ø–ª—ç—à –æ–∫–Ω–æ
        self.adjustSize()
        screen = QGuiApplication.primaryScreen().availableGeometry()
        geom   = self.frameGeometry()
        geom.moveCenter(screen.center())
        self.move(geom.topLeft())

class InitWorker(QObject):
    step = Signal(str)
    finished = Signal()
    # + —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≥–æ—Ç–æ–≤–æ–π MeshData –≤ TestPage
    mesh_ready = Signal(object)

    # + –î–æ–±–∞–≤–ª—è–µ–º __init__, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å MainWindow
    def __init__(self, main_window):
        super().__init__()
        self.main = main_window

    @Slot()
    def run(self):
        # + 1) –ó–∞–ø—É—Å–∫–∞–µ–º TelemetryWorker (UI-–æ–±—ä–µ–∫—Ç main.worker —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
        self.step.emit("–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é‚Ä¶")
        QMetaObject.invokeMethod(self.main.worker, "start", Qt.QueuedConnection)
        QThread.msleep(1000)

        # + 3) –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ç—è–∂—ë–ª—ã–µ –Ω–µ-UI –∑–∞–¥–∞—á–∏‚Ä¶
        self.step.emit("–í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥-–∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö‚Ä¶")
        # ‚Ä¶–Ω–∞–ø—Ä–∏–º–µ—Ä —á—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–æ–≤, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–æ–≤ –∏ —Ç.–ø.
        QThread.msleep(1000)

        # 4) –ó–∞–≤–µ—Ä—à–∞–µ–º
        self.step.emit("–ì–æ—Ç–æ–≤–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ‚Ä¶")
        QThread.msleep(500)
        # ‚Äî —É–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π main
        self.finished.emit()

class ExportLogsThread(QThread):
    finished = Signal(str, bool, str)

    def __init__(self, log_dir: str, parent=None):
        super().__init__(parent)
        self.log_dir = log_dir


    def run(self):
        # –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã
        if not os.path.isdir(self.log_dir):
            self.finished.emit("", False, f"Directory not found: {self.log_dir}")
            return
        files = [f for f in os.listdir(self.log_dir) if os.path.isfile(os.path.join(self.log_dir,f))]
        if not files:
            self.finished.emit("", False, f"No files in {self.log_dir} to zip")
            return
        now = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        archive = os.path.join(self.log_dir, f"logs_{now}.zip")
        try:
            with zipfile.ZipFile(archive, 'w') as z:
                for fn in files:
                    z.write(os.path.join(self.log_dir, fn), arcname=fn)
            self.finished.emit(archive, True, "")
        except Exception as e:
            self.finished.emit("", False, str(e))

# === WORKER –î–õ–Ø UART + UDP + –õ–û–ì–û–í + CRC-–û–®–ò–ë–û–ö ===
class TelemetryWorker(QThread):
    data_ready    = Signal(dict)
    packet_ready  = Signal(list)
    log_ready     = Signal(str)
    error_crc     = Signal()
    sim_ended     = Signal()
    simulation_progress = Signal(int, int)
    # --- –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π --- (–î–æ–±–∞–≤–ª–µ–Ω–æ)
    notification_requested = Signal(str, str) # message, level

    def __init__(self, config, port_name="COM3", baud=9600, parent=None):
        super().__init__(parent)
        self.config = config
        self.packet_format = config["packet_structure"]["format"]
        self.fields = config["packet_structure"]["fields"]
        import time
        # –î–ª—è Mahony AHRS
        self.qw, self.qx, self.qy, self.qz = 1.0, 0.0, 0.0, 0.0
        self.Kp, self.Ki = 1.0, 0.0   # Ki=0 ‚Üí –Ω–∏–∫–∞–∫–æ–≥–æ ¬´–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è¬ª
        self.int_fb_x = self.int_fb_y = self.int_fb_z = 0.0
        self.last_fuse_time = time.time()
        self.last_data_time = None
        self.sim_f = None
        # –¥–ª—è –¥—Ä–æ—Å—Å–µ–ª—è CRC‚Äë–≤–∞—Ä–Ω–∏–Ω–≥–æ–≤
        self.last_crc_warning = 0.0
        self.crc_cooldown    = 1.0   # –Ω–µ –±–æ–ª–µ–µ 1 –≤–∞—Ä–Ω–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥—É
        self.port_name = port_name
        self.baud = baud
        self._running = True
        self._paused = False
        # UDP –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.udp_enabled = False
        self.udp_host = "127.0.0.1"
        self.udp_port = 5005
        self.udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        # –î–ª—è —Ä–µ–∂–∏–º–∞ –∏–º–∏—Ç–∞—Ü–∏–∏
        self.sim_enabled   = False
        self.sim_file_path = ""
        # –õ–æ–≥–∏
        now = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        os.makedirs("log", exist_ok=True)
        self.bin_path = f"log/grib_{now}.bin"
        self.csv_path = f"log/grib_{now}.csv"
        self.f_bin = open(self.bin_path, "ab")
        self.f_csv = open(self.csv_path, "w", encoding="utf-8")
        headers = [f"field_{i}" for i in range(len(struct.unpack(STRUCT_FMT, b'\x00'*60)))]
        self.f_csv.write(";".join(headers) + "\n")

        #from functools import reduce
        #import operator
        #def xor_block(self, data: bytes) -> int:
            #return reduce(operator.xor, data, 0)
    def xor_block(self, data: bytes) -> int:
            res = 0
            for b in data:
                res ^= b
            return res

    @Slot(bool, str)
    def update_simulation(self, enabled, file_path):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –∏–º–∏—Ç–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞."""

        # –ï—Å–ª–∏ –ø—ã—Ç–∞—é—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é, –Ω–æ –ø—É—Ç—å –ø—É—Å—Ç–æ–π ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫
        if enabled and not file_path:
            self.log_ready.emit("[SIM] –ü—É—Ç—å –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –Ω–µ –∑–∞–¥–∞–Ω, —Ä–µ–∂–∏–º –∏–º–∏—Ç–∞—Ü–∏–∏ –ù–ï –≤–∫–ª—é—á—ë–Ω.")
            return

        # 1. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ–∞–π–ª —Å–∏–º—É–ª—è—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ—Ç–∫—Ä—ã—Ç
        if hasattr(self, 'sim_f') and self.sim_f:
            try:
                self.sim_f.close()
                print("[SIM] Closed previous simulation file.") # Debug
            except Exception as e:
                print(f"[SIM] Error closing previous simulation file: {e}") # Debug
        self.sim_f = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ

        # 2. –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∏ —Å—Ç–∞—Ç—É—Å —Å–∏–º—É–ª—è—Ü–∏–∏ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞)
        self.sim_file_path = file_path
        self.sim_enabled = enabled

        # 3. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ —Å–∏–º—É–ª—è—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
        self.sim_file_size = None
        if enabled and file_path:
            try:
                self.sim_file_size = os.path.getsize(file_path)
            except Exception as e:
                self.log_ready.emit(f"[ERROR] Could not get size of simulation file {file_path}: {e}")

        # 4. –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        ts = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_msg = f"[{ts}] Simulation set: enabled={enabled}, path={file_path or 'None'}"
        self.log_ready.emit(log_msg)
        print(log_msg) # –î—É–±–ª–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    @Slot(bool, str, int)
    def update_udp(self, enabled, host, port):
        """–û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UDP."""
        self.udp_enabled = enabled
        self.udp_host = host
        self.udp_port = port
        ts = datetime.datetime.now()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–æ–∫–µ—Ç
        try:
            if hasattr(self, 'udp_socket') and self.udp_socket:
                try:
                    self.udp_socket.close()
                except Exception:
                    pass
                self.udp_socket = None
        except Exception:
            pass

        if enabled:
            try:
                self.udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                self.udp_socket.settimeout(0.1)  # Set timeout immediately
                self.udp_socket.bind(('', self.udp_port))
                self.log_ready.emit(f"[{ts}] UDP settings updated: enabled={enabled}, host={host}, port={port}")
                self.udp_socket.sendto(b"status", (self.udp_host, self.udp_port))
                self.log_ready.emit(f"[{datetime.datetime.now()}] UDP bound to port {self.udp_port} and 'status' sent")
            except Exception as e:
                self.log_ready.emit(f"[ERROR] UDP bind failed: {e}")
                self.udp_enabled = False
                self.udp_socket = None
        else:
            self.log_ready.emit(f"[{datetime.datetime.now()}] UDP disabled; socket closed")

    def pause(self):
        self._paused = True

    def resume(self):
        self._paused = False

    def is_paused(self):
        return self._paused

    def stop(self):
        self._running = False
        # —Å—Ä–∞–∑—É –∑–∞–∫—Ä–æ–µ–º —Ñ–∞–π–ª—ã, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å FS
        try:
            if hasattr(self, 'f_bin') and not self.f_bin.closed: self.f_bin.close()
        except: pass
        try:
            if hasattr(self, 'f_csv') and not self.f_csv.closed: self.f_csv.close()
        except: pass

    def run(self):
        print("[WORKER] TelemetryWorker thread started") # –ò–∑–º–µ–Ω–µ–Ω–æ
        # –£–±–∏—Ä–∞–µ–º –≤—ã–≤–æ–¥ –ø—Ä–æ SIM, –æ–Ω –º–æ–∂–µ—Ç —Å–±–∏–≤–∞—Ç—å —Å —Ç–æ–ª–∫—É
        # print(f"[SIM] run() started: initial sim_enabled={self.sim_enabled}, udp_enabled={self.udp_enabled}")
        buf = b"" # –ë—É—Ñ–µ—Ä –¥–ª—è COM-–ø–æ—Ä—Ç–∞ –∏ —Å–∏–º—É–ª—è—Ü–∏–∏
        self.log_ready.emit(f"Telemetry thread started. Version {APP_VERSION}")
        self.log_ready.emit(f"–ù–∞–¥—ë–∂–Ω–∞—è –≤–µ—Ä—Å–∏—è: {STABLE_VERSION}")

        while self._running:
            # –ï—Å–ª–∏ –Ω–∏ —Å–∏–º—É–ª—è—Ü–∏—è, –Ω–∏ UDP –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã, –¥–∞—ë–º GUI –æ—Ç–¥–æ—Ö–Ω—É—Ç—å
            if not self.sim_enabled and not self.udp_enabled:
                self.msleep(50)   # –ø–∞—É–∑–∞ 50 –º—Å
                continue
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–µ–∂–∏–º–∞ –∏–º–∏—Ç–∞—Ü–∏–∏
            if self.sim_enabled:
                if not hasattr(self, 'sim_f') or self.sim_f is None:
                    try:
                        #print(f"[SIM_DBG] Attempting to open: {self.sim_file_path}") # Debug
                        self.sim_f = open(self.sim_file_path, 'rb')
                        self.log_ready.emit(f"[SIM] Opened simulation file: {self.sim_file_path}")
                        #print(f"[SIM_DBG] File opened successfully.") # Debug
                    except Exception as e:
                        self.log_ready.emit(f"[ERROR] Failed to open simulation file {self.sim_file_path}: {e}")
                        self.sim_enabled = False # –û—Ç–∫–ª—é—á–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
                        self.msleep(1000)
                        continue

                try:
                    rcv = self.sim_f.read(60) # –ß–∏—Ç–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–π –±–ª–æ–∫
                    #print(f"[SIM_DBG] Read {len(rcv)} bytes from file.") # Debug
                    if not rcv:
                        self.log_ready.emit("[SIM] End of simulation file reached")
                        self.sim_ended.emit()
                        self.sim_enabled = False
                        try: self.sim_f.close()
                        except: pass
                        self.sim_f = None
                        self.msleep(50) # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥. —Ü–∏–∫–ª–æ–º
                        continue
                    # –≠–º–∏—Ç–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å (—Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –∏ —Ä–∞–∑–º–µ—Ä)
                    pos = self.sim_f.tell()
                    if hasattr(self, "sim_file_size") and self.sim_file_size:
                        self.simulation_progress.emit(pos, self.sim_file_size)
                    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                    self.msleep(500) # –£–≤–µ–ª–∏—á–∏–º –∑–∞–¥–µ—Ä–∂–∫—É (–±—ã–ª–æ 100)

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–π –ø–∞–∫–µ—Ç –∏–∑ —Å–∏–º—É–ª—è—Ü–∏–∏ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
                    if self._paused:
                        continue
                    buf += rcv
                    # --- –û—Ç–ª–∞–¥–∫–∞ –°–∏–º—É–ª—è—Ü–∏–∏ --- (–î–æ–±–∞–≤–ª–µ–Ω–æ)
                    #print(f"[SIM_DEBUG] Read {len(rcv)} bytes. Buffer size: {len(buf)}")
                    while len(buf) >= 60:
                         # ... (–°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ buf) ...
                         if buf[:2] == b"\xAA\xAA":
                             # --- –û—Ç–ª–∞–¥–∫–∞ –°–∏–º—É–ª—è—Ü–∏–∏ --- (–î–æ–±–∞–≤–ª–µ–Ω–æ)
                             #print("[SIM_DEBUG] Found header 0xAAAA")
                             chunk = buf[:60]
                             try:
                                 pkt = struct.unpack(self.packet_format, chunk)
                                 #print(f"[SIM_DBG] Unpacked pkt: {pkt}") # Debug
                             except struct.error:
                                 # --- –û—Ç–ª–∞–¥–∫–∞ –°–∏–º—É–ª—è—Ü–∏–∏ --- (–î–æ–±–∞–≤–ª–µ–Ω–æ)
                                 #print("[SIM_DEBUG] Struct unpack error. Skipping byte.")
                                 buf = buf[1:]
                                 continue
                             # --- –û—Ç–ª–∞–¥–∫–∞ –°–∏–º—É–ª—è—Ü–∏–∏ --- (–î–æ–±–∞–≤–ª–µ–Ω–æ)
                             calculated_crc = self.xor_block(chunk[:-1])
                             received_crc = pkt[-1]
                             #print(f"[SIM_DEBUG] CRC Check: Calculated={calculated_crc}, Received={received_crc}")
                             if calculated_crc == received_crc:
                                 # --- –û—Ç–ª–∞–¥–∫–∞ –°–∏–º—É–ª—è—Ü–∏–∏ --- (–î–æ–±–∞–≤–ª–µ–Ω–æ)
                                 #print("[SIM_DEBUG] CRC OK. Emitting data_ready.")
                                 try:
                                     # --- –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ data –∏–∑ self.fields --- (–ò–∑–º–µ–Ω–µ–Ω–æ)
                                     data = {}
                                     # –ò—Å–ø–æ–ª—å–∑—É–µ–º self.fields, –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –∏–∑ packet_structure
                                     for field in self.fields:
                                         field_name = field.get("name")
                                         if not field_name:
                                             continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–µ –±–µ–∑ –∏–º–µ–Ω–∏
                                         
                                         field_type = field.get("type")
                                         scale = field.get("scale", 1.0)
                                         mask = field.get("mask")
                                         indices = field.get("indices")
                                         index = field.get("index")

                                         # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                                         if field_type == "vector3" and indices and len(indices) == 3:
                                             try:
                                                 val = [pkt[i] * scale for i in indices]
                                                 data[field_name] = val
                                             except IndexError:
                                                 self.log_ready.emit(f"[ERROR][SIM] Invalid indices {indices} for packet length {len(pkt)} in field {field_name}")
                                         elif field_type == "float" and index is not None:
                                             try:
                                                 val = pkt[index] * scale
                                                 data[field_name] = val
                                             except IndexError:
                                                 self.log_ready.emit(f"[ERROR][SIM] Invalid index {index} for packet length {len(pkt)} in field {field_name}")
                                         elif field_type == "int" and index is not None:
                                             try:
                                                 val = pkt[index]
                                                 if mask is not None:
                                                     val &= mask
                                                 # --- –ü—Ä–∏–º–µ–Ω—è–µ–º scale --- (–î–æ–±–∞–≤–ª–µ–Ω–æ)
                                                 if scale != 1.0:
                                                     val = val * scale
                                                 data[field_name] = val
                                             except IndexError:
                                                 self.log_ready.emit(f"[ERROR][SIM] Invalid index {index} for packet length {len(pkt)} in field {field_name}")
                                         elif index is not None: # –û–±—Ä–∞–±–æ—Ç–∫–∞ uint/int/–ø—Ä–æ—á–∏—Ö –ø–æ index, –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω —è–≤–Ω–æ
                                              try:
                                                  # --- –ß–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º scale --- (–î–æ–±–∞–≤–ª–µ–Ω–æ)
                                                  val = pkt[index]
                                                  # –ü–æ–ª—É—á–∞–µ–º scale –∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª—É—á–∞—è
                                                  scale = field.get("scale", 1.0)
                                                  if scale != 1.0:
                                                      val = val * scale
                                                  data[field_name] = val
                                              except IndexError:
                                                  self.log_ready.emit(f"[ERROR][SIM] Invalid index {index} for packet length {len(pkt)} in field {field_name}")
                                         # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (bytes –∏ —Ç.–¥.)
                                     # --- –ö–æ–Ω–µ—Ü –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è --- 
                                     #print(f"[SIM_DBG] Parsed data dict: {data}") # Debug
 
                                     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                                     self.data_ready.emit(data)
                                     self.last_data_time = time.time()
                                     if self.f_csv and not self.f_csv.closed:
                                         self.f_csv.write(";".join(str(x) for x in pkt) + "\n")
                                     if self.f_bin and not self.f_bin.closed:
                                        self.f_bin.write(chunk)
                                     buf = buf[60:]
                                 except Exception as e:
                                     self.log_ready.emit(f"[ERROR] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª–µ–π –∏–∑ config (—Å–∏–º—É–ª—è—Ü–∏—è): {e}") # –ò–∑–º–µ–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                     buf = buf[60:] # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–∫–µ—Ç, —Ç.–∫. –Ω–µ —Å–º–æ–≥–ª–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å data
                                     continue
                             else:
                                 self.error_crc.emit()
                                 mw = QApplication.activeWindow()
                                 # --- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–≥–Ω–∞–ª –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ notify --- (–ò–∑–º–µ–Ω–µ–Ω–æ)
                                 self.notification_requested.emit("CRC mismatch (sim)", "warning")
                                 buf = buf[1:] # –°–¥–≤–∏–≥–∞–µ–º –±—É—Ñ–µ—Ä –ù–ê –û–î–ò–ù –ë–ê–ô–¢ –ø—Ä–∏ CRC –æ—à–∏–±–∫–µ
                         else:
                             # --- –û—Ç–ª–∞–¥–∫–∞ –°–∏–º—É–ª—è—Ü–∏–∏ --- (–î–æ–±–∞–≤–ª–µ–Ω–æ)
                             #print(f"[SIM_DEBUG] Header not found at start of buffer (starts with {buf[:2]}). Skipping byte.")
                             #print(f"[SIM_DEBUG] Header not found at start (starts with {buf[:2]}). Searching...")
                             header_index = buf.find(b"\xAA\xAA")
                             if header_index != -1:
                                 #print(f"[SIM_DBG] Header found at index {header_index}.") # Debug
                                 #print(f"[SIM_DEBUG] Header found at index {header_index}. Slicing buffer.")
                                 # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞–π–¥–µ–Ω, –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –±–∞–π—Ç—ã –ø–µ—Ä–µ–¥ –Ω–∏–º
                                 buf = buf[header_index:]
                             else:
                                 #print(f"[SIM_DBG] Header not found in current buffer (len={len(buf)}). Keeping last byte.") # Debug
                                 #print("[SIM_DEBUG] Header not found in buffer. Keeping last byte.")
                                 # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–æ –≤—Å–µ–º –±—É—Ñ–µ—Ä–µ.
                                 # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–π—Ç, —Ç.–∫. –Ω–∞—á–∞–ª–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (0xAA)
                                 # –º–æ–≥–ª–æ –ø–æ–ø–∞—Å—Ç—å –≤ –∫–æ–Ω–µ—Ü –±—É—Ñ–µ—Ä–∞ –∏ –±—ã—Ç—å —á–∞—Å—Ç—å—é —Å–ª–µ–¥—É—é—â–µ–≥–æ —á—Ç–µ–Ω–∏—è.
                                 # –ï—Å–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å buf = b"", —Ç–æ –ø–∞–∫–µ—Ç—ã —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.
                                 buf = buf[-1:] 
                                 break # –í—ã—Ö–æ–¥–∏–º –∏–∑ while, —Ç.–∫. –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–∞–∫–µ—Ç –Ω–µ —Å–æ–±—Ä–∞—Ç—å

                except Exception as e:
                    self.log_ready.emit(f"[ERROR] –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
                    self.msleep(1000)
                    continue # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª

            # –†–µ–∂–∏–º UDP (–µ—Å–ª–∏ —Å–∏–º—É–ª—è—Ü–∏—è –í–´–ö–õ–Æ–ß–ï–ù–ê)
            elif self.udp_enabled:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–æ–∫–µ—Ç–∞
                if not hasattr(self, 'udp_socket') or not self.udp_socket:
                    self.log_ready.emit("[WARN] UDP –≤–∫–ª—é—á–µ–Ω, –Ω–æ —Å–æ–∫–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–µ–Ω/–∑–∞–∫—Ä—ã—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é.")
                    self.msleep(500) # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    continue

                try:
                    rcv, addr = self.udp_socket.recvfrom(4096) # –£–≤–µ–ª–∏—á–∏–º –±—É—Ñ–µ—Ä –¥–ª—è JSON
                    # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç, –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏
                    if self._paused:
                        continue
                    if not rcv:  # Empty data
                        continue
                        
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å—Ç–∞—Ç—É—Å-–∑–∞–ø—Ä–æ—Å–æ–º
                        if rcv == b"status":
                            self.log_ready.emit(f"[UDP] Received status request from {addr}")
                            continue
                            
                        # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8
                        try:
                            json_string = rcv.decode('utf-8')
                        except UnicodeDecodeError:
                            self.log_ready.emit(f"[ERROR] Invalid UTF-8 data from {addr}")
                            continue
                            
                        if not json_string.strip():  # Skip empty strings
                            continue
                            
                        # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
                        try:
                            data = json.loads(json_string)
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                            if not isinstance(data, dict):
                                self.log_ready.emit(f"[ERROR] Invalid JSON format from {addr}: not a dictionary")
                                continue
                                
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π JSON
                            self.data_ready.emit(data)
                            self.last_data_time = time.time()
                            self.log_ready.emit(f"[UDP] Received valid packet from {addr}")
                        except json.JSONDecodeError as e:
                            self.log_ready.emit(f"[ERROR] Invalid JSON from {addr}: {e}")
                            self.log_ready.emit(f"[DEBUG] Raw data: {rcv.hex()}")
                    except Exception as e:
                        self.log_ready.emit(f"[ERROR] Error processing UDP packet from {addr}: {e}")

                except socket.timeout:
                    pass # –¢–∞–π–º–∞—É—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                except Exception as e:
                    # –õ–æ–≥–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ —Å–æ–∫–µ—Ç–∞, –Ω–æ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫
                    self.log_ready.emit(f"[ERROR] –û—à–∏–±–∫–∞ UDP —Å–æ–∫–µ—Ç–∞: {e}")
                    # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–∫–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    try:
                        if self.udp_socket:
                            self.udp_socket.close()
                    except:
                        pass
                    self.udp_socket = None
                    self.msleep(1000) # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π


        # --- –ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ --- (–æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –±—ã–ª–æ)
        if getattr(self, 'sim_f', None):
            try: self.sim_f.close()
            except: pass
        for fh in (getattr(self, 'f_bin', None), getattr(self, 'f_csv', None)):
            try:
                if fh and not fh.closed: fh.close()
            except: pass
        self.log_ready.emit(f"[{datetime.datetime.now()}] TelemetryWorker stopped")

    sim_ended = Signal()  # <-- –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª

# === –¢–Å–ú–ù–ê–Ø –¢–ï–ú–ê ===
def apply_dark_theme(app: QApplication):
    pal = QPalette()
    pal.setColor(QPalette.Window, QColor(COLORS["bg_main"]))
    pal.setColor(QPalette.WindowText, QColor(COLORS["text_primary"]))
    pal.setColor(QPalette.Base, QColor(COLORS["bg_panel"]))
    pal.setColor(QPalette.AlternateBase, QColor("#353535"))
    pal.setColor(QPalette.Text, QColor(COLORS["text_primary"]))
    pal.setColor(QPalette.Button, QColor(COLORS["btn_normal"]))
    pal.setColor(QPalette.ButtonText, QColor(COLORS["text_primary"]))
    pal.setColor(QPalette.Highlight, QColor(COLORS["accent"]))
    pal.setColor(QPalette.HighlightedText, Qt.white)
    app.setPalette(pal)
    app.setStyle("Fusion")

    app.setStyleSheet("""
            /* –ë–∞–∑–æ–≤–∞—è –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Ç–µ–º–∞ */
            QWidget {
                background-color: #1e1e1e;
                color: #eeeeee;
                font-family: "Segoe UI", sans-serif;
            }
            QPushButton {
                background: #2e2e2e;
                border: none;
                border-radius: 4px;
                padding: 6px 12px;
            }
            QPushButton:hover {
                background: #3a3a3a;
            }
            QPushButton:pressed {
                background: #444444;
            }
            QFrame#card {
                background: #2e2e2e;
                border: none;
                border-radius: 6px;
                padding: 8px;
            }
            QLabel#title {
                color: #bbbbbb;
                font-size: 10pt;
            }
            QLabel#value {
                color: #ffffff;
                font-size: 12pt;
                font-weight: bold;
            }
            QProgressBar {
                background: #2e2e2e;
                border: none;
                border-radius: 4px;
                text-align: center;
            }
            QProgressBar::chunk {
                background: #81c784;
                border-radius: 4px;
            }
        """)

# === –°–¢–†–ê–ù–ò–¶–ê –¢–ï–õ–ï–ú–ï–¢–†–ò–ò + –ì–†–ê–§–ò–ö–ò ===
class TelemetryPage(QWidget):
    def __init__(self, config):
        super().__init__()
        self.config = config
        self._last_values = {}

        # --- –£–±–∏—Ä–∞–µ–º –æ–±—â–∏–π —Å—Ç–∏–ª—å –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã --- (–£–¥–∞–ª–µ–Ω–æ)
        # self.setStyleSheet(f""" ... ")

        # 1. –û—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π layout –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_layout = QVBoxLayout(self)
        page_layout.setContentsMargins(10, 10, 10, 10) # –î–æ–±–∞–≤–∏–º –æ—Ç—Å—Ç—É–ø—ã
        page_layout.setSpacing(12)

        # 2. –ö–Ω–æ–ø–∫–∞ –ü–∞—É–∑–∞/–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å (–¥–æ–±–∞–≤–ª—è–µ–º –≤ page_layout)
        self.pause_btn = QPushButton("‚è∏ –ü–∞—É–∑–∞")
        self.pause_btn.setEnabled(False)
        self.pause_btn.clicked.connect(self.toggle_pause)
        page_layout.addWidget(self.pause_btn)

        # 3. ScrollArea –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setFrameShape(QFrame.NoFrame) # –£–±—Ä–∞—Ç—å —Ä–∞–º–∫—É —É scroll area
        scroll_area.setStyleSheet("background: transparent;") # –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω

        # 4. –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è GridLayout –≤–Ω—É—Ç—Ä–∏ ScrollArea
        content_widget = QWidget()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É (–î–æ–±–∞–≤–ª–µ–Ω–æ)
        content_widget.setStyleSheet("background: transparent;") 

        # 5. GridLayout –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è content_widget)
        grid_layout = QGridLayout(content_widget)
        grid_layout.setSpacing(12)
        grid_layout.setContentsMargins(0, 0, 0, 0) # –£–±–∏—Ä–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã —Å–µ—Ç–∫–∏

        # 6. –°–≤—è–∑—ã–≤–∞–µ–º ScrollArea –∏ content_widget
        scroll_area.setWidget(content_widget)

        # 7. –î–æ–±–∞–≤–ª—è–µ–º scroll_area –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_layout.addWidget(scroll_area)

        # --- –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –∏–∑ config["telemetry_view"] ---
        self._label_widgets = {}
        row = 0
        col = 0
        max_cols = 2 # –ú–∞–∫—Å–∏–º—É–º –∫–æ–ª–æ–Ω–æ–∫

        for idx, f in enumerate(config.get("telemetry_view", {}).get("fields", [])):
            card = QFrame()
            card.setObjectName("card")
            # –£—Å—Ç–∞–Ω–æ–≤–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ —Å–∂–∏–º–∞–ª–∏—Å—å —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ
            card.setMinimumHeight(80)
            card_layout = QVBoxLayout(card)
            card_layout.setContentsMargins(10, 8, 10, 8)

            title = QLabel(f.get("label", ""), objectName="title")
            # --- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ --- (–î–æ–±–∞–≤–ª–µ–Ω–æ)
            title.setMinimumHeight(20) # –ü–æ–¥–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            value = QLabel("‚Äì", objectName="value")

            # –°–¥–µ–ª–∞–µ–º —Ç–µ–∫—Å—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∫—Ä—É–ø–Ω–µ–µ –∏ –∂–∏—Ä–Ω–µ–µ
            font = value.font()
            font.setPointSize(14)
            font.setBold(True)
            value.setFont(font)

            value.setAlignment(Qt.AlignCenter)
            value.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

            card_layout.addWidget(title, alignment=Qt.AlignHCenter) # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            card_layout.addWidget(value)

            # --- –ó–∞–¥–∞–µ–º —Å—Ç–∏–ª—å –ö–ê–ñ–î–û–ô –∫–∞—Ä—Ç–æ—á–∫–µ –Ω–∞–ø—Ä—è–º—É—é --- (–î–æ–±–∞–≤–ª–µ–Ω–æ)
            card.setStyleSheet(f"""
                QFrame {{ 
                    background-color: {COLORS['bg_dark']}; 
                    border-radius: 12px; 
                    border: 1px solid {COLORS['chart_grid']};
                }}
                QLabel#title {{ 
                    color: {COLORS['text_secondary']};
                    font-size: 10pt; 
                    font-weight: normal;
                    padding-bottom: 4px;
                    background: transparent; /* –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –ª–µ–π–±–ª–æ–≤ –Ω–µ—Ç —Ñ–æ–Ω–∞ */
                    border: none;
                }}
                 QLabel#value {{ 
                    color: {COLORS['text_primary']};
                    font-size: 11pt; /* –£–º–µ–Ω—å—à–µ–Ω —à—Ä–∏—Ñ—Ç (–±—ã–ª–æ 14pt) */
                    font-weight: bold;
                    background: transparent; /* –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –ª–µ–π–±–ª–æ–≤ –Ω–µ—Ç —Ñ–æ–Ω–∞ */
                    border: none;
                }}
            """)
            # --- –ö–æ–Ω–µ—Ü –∑–∞–¥–∞–Ω–∏—è —Å—Ç–∏–ª—è ---

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ grid_layout
            grid_layout.addWidget(card, row, col)
            self._label_widgets[f["source"]] = (value, f)

            # Move to next column or row
            col = (col + 1) % max_cols
            if col == 0:
                row += 1

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü —Å–µ—Ç–∫–∏ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏,
        # —á—Ç–æ–±—ã –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–ª–∏—Å—å –Ω–∞ –≤—Å—é –≤—ã—Å–æ—Ç—É, –µ—Å–ª–∏ –∏—Ö –º–∞–ª–æ
        grid_layout.setRowStretch(row + 1, 1)
        # --- –ü–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∏–ª—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤ --- (–î–æ–±–∞–≤–ª–µ–Ω–æ)
        content_widget.update()
        content_widget.style().unpolish(content_widget)
        content_widget.style().polish(content_widget)

    @Slot(dict)
    def update_values(self, data):
        self._last_values = data.copy() if data else {}

        if not self.pause_btn.isEnabled():
            self.pause_btn.setEnabled(True)

        for src, (label, field) in self._label_widgets.items():
            val = data.get(src)
            # Get the format string from the field config, default to '{}'
            fmt = field.get("format", "{}")
            text_to_set = "‚Äì" # Default text if value is None

            if val is not None:
                try:
                    if isinstance(val, (list, tuple)):
                        # Attempt to format the list/tuple using the provided format string
                        # This assumes the format string is compatible (e.g., "[{:.2f}, {:.2f}, {:.2f}]")
                        # A more robust solution might involve parsing the format string.
                        # For now, try direct formatting, fallback to simple join.
                        try:
                            # Special case for list/tuple: unpack elements if format allows
                            text_to_set = fmt.format(*val)
                        except (TypeError, IndexError):
                            # Fallback if format string expects a single value or wrong number of args
                            text_to_set = ", ".join(str(x) for x in val) # Original simple join
                    elif isinstance(val, (int, float)):
                        # Format single number
                        text_to_set = fmt.format(val)
                    else:
                        # Fallback for other types (string, bool, etc.)
                        text_to_set = fmt.format(val) # Try formatting anyway
                except Exception as e:
                    # Catch potential formatting errors (e.g., trying to format a non-number with {:.2f})
                    print(f"[TelemetryPage] Error formatting value for {src} (value: {val}, format: {fmt}): {e}")
                    text_to_set = f"Err: {val}" # Show error indicator instead of crashing

            # Update the label text
            label.setText(text_to_set)

    @Slot()
    def toggle_pause(self):
        if hasattr(self, 'worker'):
            if self.worker.is_paused():
                self.worker.resume()
                self.pause_btn.setText("‚è∏ –ü–∞—É–∑–∞")
            else:
                self.worker.pause()
                self.pause_btn.setText("‚ñ∂ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")

    def set_worker(self, worker):
        self.worker = worker

    @Slot()
    def clear_values(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –≤ '‚Äì'."""
        for src, (label, field) in self._label_widgets.items():
            label.setText("‚Äì")
        # –¢–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self._last_values = {}
        print("[TelemetryPage] Values cleared.") # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

class DraggableCard(QFrame):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setAcceptDrops(True)

    def mousePressEvent(self, ev: QMouseEvent):
        mime = QMimeData()
        # –ø–µ—Ä–µ–¥–∞—ë–º –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞
        mime.setData("application/x-card", QByteArray(str(id(self)).encode()))
        drag = QDrag(self)
        drag.setMimeData(mime)
        drag.exec(Qt.MoveAction)

    def dragEnterEvent(self, ev: QDragEnterEvent):
        if ev.mimeData().hasFormat("application/x-card"):
            ev.acceptProposedAction()

    def dragMoveEvent(self, ev: QDragMoveEvent):
        if ev.mimeData().hasFormat("application/x-card"):
            ev.acceptProposedAction()

    def dropEvent(self, ev: QDropEvent):
        source = ev.source()
        target = self
        if isinstance(source, DraggableCard) and source is not target:
            layout = target.parent().layout()  # —ç—Ç–æ QGridLayout

            # –Ω–∞–π–¥—ë–º –ø–æ–∑–∏—Ü–∏—é source –∏ target
            idx_src = layout.indexOf(source)
            idx_tgt = layout.indexOf(target)
            r_src, c_src, _, _ = layout.getItemPosition(idx_src)
            r_tgt, c_tgt, _, _ = layout.getItemPosition(idx_tgt)

            # —É–±–∏—Ä–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –∏–∑ layout
            layout.removeWidget(source)
            layout.removeWidget(target)

            # —Å—Ç–∞–≤–∏–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ swapped –ø–æ–∑–∏—Ü–∏–∏
            layout.addWidget(source, r_tgt, c_tgt)
            layout.addWidget(target, r_src, c_src)

        ev.acceptProposedAction()

class GraphsPage(QWidget):
    def __init__(self, config):
        super().__init__()
        self.config = config
        self._orig_pos = {}
        # --- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ö–∞—Ä—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è --- (–î–æ–±–∞–≤–ª–µ–Ω–æ)
        # key=source_name (e.g. "accel_x"), value=list of (QLineSeries, index_or_None)
        self._series_map: Dict[str, List[Tuple[QLineSeries, Optional[int]]]] = {}
        # key=chart_name, value=dict with chart info (view, series list, axes, etc.)
        self.charts: Dict[str, Dict] = {}
        # key=chart_name or series_key, value=current_x_index
        self.indexes = {}
        # --- –ö–æ–Ω–µ—Ü –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ---
        layout = QGridLayout(self)
        self._detached_windows = {}
        # === System Monitor ===
        import psutil
        from PySide6.QtWidgets import QFrame, QLabel, QHBoxLayout
        self.sys_frame = QFrame()
        self.sys_frame.setObjectName("card")
        h = QHBoxLayout(self.sys_frame)
        self.cpu_label = QLabel("CPU: ‚Äì %")
        self.ram_label = QLabel("RAM: ‚Äì %")
        self.lat_label = QLabel("UDP Latency: ‚Äì s")
        for lbl in (self.cpu_label, self.ram_label, self.lat_label):
            lbl.setStyleSheet("font-size:10pt; font-weight:bold;")
            h.addWidget(lbl)
        layout.addWidget(self.sys_frame, 0, 0, 1, 2)

        # —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        from PySide6.QtCore import QTimer
        self.sys_timer = QTimer(self)
        self.sys_timer.timeout.connect(lambda: self._update_system_monitor(psutil))
        self.sys_timer.start(3000)
        # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–µ—Ç–∫—É –≤ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—É—é –æ–±–ª–∞—Å—Ç—å
        scroll = QScrollArea(self)
        scroll.setWidgetResizable(True) # Revert to standard behavior
        content = QWidget()
        layout = QGridLayout(content)
        self.setLayout(QVBoxLayout())
        self.layout().addWidget(scroll)
        scroll.setWidget(content)
        layout.setSpacing(12)
        self._grid_layout = self.findChild(QScrollArea).widget().layout()

        # Make the first two columns stretch equally
        self._grid_layout.setColumnStretch(0, 1)
        self._grid_layout.setColumnStretch(1, 1)
        # Explicitly prevent stretching of subsequent columns
        self._grid_layout.setColumnStretch(2, 0)

        # Dictionary to store all chart views and series
        # --- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ö–∞—Ä—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è --- (–î–æ–±–∞–≤–ª–µ–Ω–æ)
        self.charts = {}
        self.indexes = {}
        self.data_points = {}  # Store maximum points to display
        self.data_history     = {}      # –ò–º—è -> —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π
        self.default_y_ranges = {}      # –ò–º—è -> –∏—Å—Ö–æ–¥–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ Y
        self.last_extreme     = {}      # –ò–º—è -> –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
        self.extreme_decay    = 5.0     # —Å–µ–∫—É–Ω–¥ –¥–æ —Å–±—Ä–æ—Å–∞ –∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É

        # --- Load Saved Layout ---
        self._loaded_layout = {}
        try:
            cfg_parser = configparser.ConfigParser()
            # Read config.ini, ensuring the file exists
            if os.path.exists("config.ini"):
                cfg_parser.read("config.ini")
                if cfg_parser.has_section("Layout") and cfg_parser.has_option("Layout", "chart_positions"):
                    pos_str = cfg_parser.get("Layout", "chart_positions")
                    # Parse "name1:row1:col1,name2:row2:col2,..."
                    for item in pos_str.split(','):
                        parts = item.split(':')
                        if len(parts) == 3:
                            name, r_str, c_str = parts
                            try:
                                self._loaded_layout[name] = (int(r_str), int(c_str))
                            except ValueError:
                                print(f"[GraphsPage] Warning: Invalid position '{r_str}:{c_str}' for chart '{name}' in config.ini")
                    print(f"[GraphsPage] Loaded layout: {self._loaded_layout}") # Debug print
                else:
                    print("[GraphsPage] No saved layout found in config.ini.")
            else:
                print("[GraphsPage] config.ini not found, using default layout.")
        except configparser.Error as e:
            print(f"[GraphsPage] Error reading config.ini for layout: {e}")
        except Exception as e:
            print(f"[GraphsPage] Unexpected error loading layout: {e}")

        # –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ —Å–µ–∫—Ü–∏–∏ "graphs" –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (tw_config.py)
        for cfg in self.config.get("graphs", []):
            wrapper = self.create_chart(cfg)
            size = cfg.get("size", [1, 1])
            # Use loaded position if available, otherwise default from config
            chart_name = cfg.get("name")
            if chart_name in self._loaded_layout:
                pos = self._loaded_layout[chart_name]
                #print(f"[GraphsPage] Using saved position {pos} for '{chart_name}'") # Debug print
            else:
                pos = cfg.get("position", [0, 0]) # Default position from config
                #print(f"[GraphsPage] Using default position {pos} for '{chart_name}'") # Debug print
            self._grid_layout.addWidget(wrapper, pos[0], pos[1], size[0], size[1])

    def reset_charts(self):
            """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –≤–µ—Ä–Ω—É—Ç—å –∏—Ö –≤ –¥–µ—Ñ–æ–ª—Ç."""
            # 1) –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–∏–∏
            for cfg in self.charts.values():
                if cfg["multi_axis"]:
                    for s in cfg["series"]:
                        s.clear()
                else:
                    cfg["series"].clear()
            # 2) –°–±—Ä–æ—Å–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã X
            for k in self.indexes:
                self.indexes[k] = 0
            # 3) –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∞–≤—Ç–æ-—Å–∫–µ–π–ª–∏–Ω–≥–∞
            self.data_history.clear()
            # 4) –í–µ—Ä–Ω—É—Ç—å –æ—Å–∏ –≤ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å
            for name, cfg in self.charts.items():
                x_axis = cfg["x_axis"]
                y_axis = cfg["y_axis"]
                dmin, dmax = self.default_y_ranges.get(name, (0,1))
                y_axis.setRange(dmin, dmax)
                x_axis.setRange(0, 5)
                cfg["view"].update()

    def _update_system_monitor(self, psutil):
            # CPU –∏ RAM
            cpu = psutil.cpu_percent()
            ram = psutil.virtual_memory().percent
            # –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å MainWindow —á–µ—Ä–µ–∑ self.window()
            mw = self.window()
            lat_text = "UDP Latency: N/A"
            if mw and hasattr(mw, "worker"):
                last = getattr(mw.worker, "last_data_time", None)
                if last:
                    lat = time.time() - last
                    lat_text = f"UDP Latency: {lat:.2f}s"

            # –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏
            self.cpu_label.setText(f"CPU: {cpu:.0f}%")
            self.ram_label.setText(f"RAM: {ram:.0f}%")
            self.lat_label.setText(lat_text)

    def create_chart(self, config):
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ —Å—Ç–∞—Ä–æ–≥–æ, –∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        title = config.get("title", config.get("name", "–ì—Ä–∞—Ñ–∏–∫"))
        
        # –î–∏–∞–ø–∞–∑–æ–Ω Y - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (y_range), —Ç–∞–∫ –∏ –Ω–æ–≤—ã–π (y_min/y_max)
        if "y_range" in config:
            y_range = config["y_range"]
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º y_min/y_max –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            y_min = config.get("y_min", 0)
            y_max = config.get("y_max", 100)
            y_range = (y_min, y_max)
        
        # –¶–≤–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∞
        color = config.get("color", "#4fc3f7")  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ü–≤–µ—Ç
        
        # –¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞
        chart_type = config.get("type", "line")  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–∏–ø - –ª–∏–Ω–µ–π–Ω—ã–π
        
        name = config["name"]
        multi_axis = config.get("multi_axis", False)
        axis_names = config.get("axis_names", ["X", "Y", "Z"])

        # Initialize index and series
        self.indexes[name] = 0

        # Create chart and setup
        chart = QChart()
        chart.setTitle(title)
        # - –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–µ—Ä–≥–∏–≤–∞–Ω–∏–π
        # chart.setAnimationOptions(QChart.SeriesAnimations)

        # Styling
        chart.setBackgroundVisible(False)
        chart.setBackgroundVisible(True)
        chart.setBackgroundBrush(Qt.transparent)
        chart.setTitleFont(QFont("Segoe UI", 12, QFont.Bold))
        chart.legend().setVisible(multi_axis)  # Show legend only for multi-axis charts
        chart.legend().setAlignment(Qt.AlignBottom)
        chart.legend().setFont(QFont("Segoe UI", 9))
        chart.legend().setLabelColor(QColor(COLORS["text_primary"]))

        # Axes
        ax_x = QValueAxis()
        ax_x.setLabelsVisible(True)
        ax_x.setTickCount(5)           # ‚ûï 5 –¥–µ–ª–µ–Ω–∏–π –ø–æ X
        ax_x.setTitleText("")              # –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –Ω–æ –ø–æ–¥–ø–∏—Å–∏ –≤–∏–¥–Ω—ã
        ax_x.setGridLineVisible(True)
        ax_x.setMinorGridLineVisible(True)

        ax_y = QValueAxis()
        ax_y.setLabelsVisible(True)
        ax_y.setTickCount(5)           # ‚ûï 5 –¥–µ–ª–µ–Ω–∏–π –ø–æ Y
        ax_y.setTitleText("")              # –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –Ω–æ –ø–æ–¥–ø–∏—Å–∏ –≤–∏–¥–Ω—ã
        ax_y.setGridLineVisible(True)
        ax_y.setMinorGridLineVisible(True)

        # Styling axes
        for axis in [ax_x, ax_y]:
            axis.setLabelsColor(QColor(COLORS["text_secondary"]))
            axis.setTitleBrush(QColor(COLORS["text_secondary"]))
            ax_x.setGridLineColor(QColor(COLORS["chart_grid"]))
            ax_x.setMinorGridLineColor(QColor(COLORS["chart_grid"]))
            ax_y.setGridLineColor(QColor(COLORS["chart_grid"]))
            ax_y.setMinorGridLineColor(QColor(COLORS["chart_grid"]))
            #axis.setMinorGridLineColor(QColor("#2a2a2a"))
            axis.setTitleFont(QFont("Segoe UI", 9))
            axis.setLabelsFont(QFont("Segoe UI", 8))

        # Create series
        if multi_axis:
            # For multi-axis data (like accelerometer with x,y,z)
            colors = ["#4fc3f7", "#ff9e80", "#aed581"]  # Blue, Orange, Green for X, Y, Z
            series_list = []

            for i in range(3):
                series = QLineSeries()
                # animate line drawing
                series.setName(axis_names[i])
                pen = QPen()
                pen.setColor(QColor(colors[i]))
                pen.setWidthF(2.0)
                series.setPen(pen)
                if config.get("use_opengl", False):
                    series.setUseOpenGL(True)
                chart.addSeries(series)

                # We must create separate Y axis for each series to avoid scaling issues
                if i == 0:
                    # Use the main Y axis for the first series
                    chart.addAxis(ax_y, Qt.AlignLeft)
                    series.attachAxis(ax_y)
                else:
                    # Create additional Y axes that will share the same scale
                    extra_y = QValueAxis()
                    extra_y.setRange(y_range[0], y_range[1])
                    extra_y.setVisible(False)  # Hide additional Y axes, only use for scaling
                    chart.addAxis(extra_y, Qt.AlignLeft)
                    series.attachAxis(extra_y)

                # All series share the X axis
                if i == 0:
                    chart.addAxis(ax_x, Qt.AlignBottom)
                series.attachAxis(ax_x)

                series_list.append(series)

            # Register in charts and series dicts
            self.charts[name] = {
                "view": None,
                "chart": chart,
                "series": series_list,
                "x_axis": ax_x,
                "y_axis": ax_y,
                "multi_axis": True,
                "y_range": y_range
            }
            # --- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ó–∞–ø–æ–ª–Ω—è–µ–º _series_map --- (–î–æ–±–∞–≤–ª–µ–Ω–æ)
            sources = config.get("sources", [])
            if len(sources) == len(series_list):
                for i, raw_src in enumerate(sources):
                    # –ü–∞—Ä—Å–∏–º source –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                    base_src, src_idx = self._parse_source(raw_src)
                    if base_src:
                        if base_src not in self._series_map:
                            self._series_map[base_src] = []
                        self._series_map[base_src].append((series_list[i], src_idx))
            # --- –ö–æ–Ω–µ—Ü –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ---
        else:
            # For single value data
            series = QLineSeries()
            pen = QPen()
            pen.setColor(QColor(color))
            pen.setWidthF(2.5)
            series.setPen(pen)

            chart.addSeries(series)
            chart.addAxis(ax_x, Qt.AlignBottom)
            chart.addAxis(ax_y, Qt.AlignLeft)
            series.attachAxis(ax_x)
            series.attachAxis(ax_y)

            # Register in charts and series dicts
            self.charts[name] = {
                "view": None,
                "chart": chart,
                "series": series,
                "x_axis": ax_x,
                "y_axis": ax_y,
                "multi_axis": False,
                "y_range": y_range
            }
            # --- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ó–∞–ø–æ–ª–Ω—è–µ–º _series_map --- (–î–æ–±–∞–≤–ª–µ–Ω–æ)
            raw_src = config.get("source")
            if raw_src:
                base_src, src_idx = self._parse_source(raw_src)
                if base_src:
                    if base_src not in self._series_map:
                        self._series_map[base_src] = []
                    self._series_map[base_src].append((series, src_idx))
            # --- –ö–æ–Ω–µ—Ü –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ---

        # Create chart view with enhanced rendering
        chart_view = QChartView(chart)
        chart_view.setRenderHint(QPainter.Antialiasing)
        # ‚ûï –í–∫–ª—é—á–∞–µ–º ¬´—Ä–µ–∑–∏–Ω–æ–≤—É—é —Ä–∞–º–∫—É¬ª –¥–ª—è –∑—É–º–∞ –∏ –ø–∞–Ω
        #chart_view.setRubberBand(QChartView.RectangleRubberBand)
        chart_view.setRenderHint(QPainter.TextAntialiasing)
        chart_view.setRenderHint(QPainter.SmoothPixmapTransform)
        chart_view.setBackgroundBrush(Qt.transparent)
        # Set a reasonable minimum size for charts
        chart_view.setMinimumSize(300, 250) 

        # wrap into card for rounded background
        wrapper = DraggableCard()
        wrapper.setObjectName("card")
        wrapper.setProperty("chart_name", name)
        wrapper.setProperty("detached", False)
        wrapper_layout = QVBoxLayout(wrapper)
        wrapper_layout.setContentsMargins(0,0,0,0)
        wrapper_layout.addWidget(chart_view)
        # + –∫–Ω–æ–ø–∫–∞ Detach (–æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–π Window-–∫–ª–æ–Ω)
        btn_detach = QPushButton("‚á±")
        btn_detach.setFixedSize(24,24)
        btn_detach.setToolTip("Open chart in separate window")
        # –ø–µ—Ä–µ–¥–∞—ë–º name, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ chart_data
        btn_detach.clicked.connect(lambda _, n=config["name"]: self._open_detach(n))
        wrapper_layout.addWidget(btn_detach, alignment=Qt.AlignLeft)

        # +++ –∫–Ω–æ–ø–∫–∞ Save PNG +++
        btn = QPushButton("üíæ Save PNG")
        btn.setFixedHeight(30)
        btn.setCursor(Qt.PointingHandCursor)
        wrapper_layout.addWidget(btn, alignment=Qt.AlignRight)
        btn.clicked.connect(lambda _, w=chart_view, n=name: self._save_chart_png(w, n))

        # Store the view reference
        self.charts[name]["view"]    = chart_view
        self.charts[name]["wrapper"] = wrapper

        # ‚ûï –ó–∞–ø–æ–º–Ω–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω Y —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        self.default_y_ranges[name] = tuple(y_range)
        return wrapper

    # --- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –•–µ–ª–ø–µ—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ source --- (–î–æ–±–∞–≤–ª–µ–Ω–æ)
    def _parse_source(self, raw_src: str) -> Tuple[Optional[str], Optional[int]]:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "name[index]" –∏–ª–∏ "name"."""
        if '[' in raw_src and ']' in raw_src:
            try:
                base, idx_str = raw_src.split('[')
                idx = int(idx_str.rstrip(']'))
                return base, idx
            except ValueError:
                print(f"[GraphsPage] Warning: Could not parse source index: {raw_src}")
                return None, None # –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω–¥–µ–∫—Å–∞
        elif raw_src:
            return raw_src, None # –ò—Å—Ç–æ—á–Ω–∏–∫ –±–µ–∑ –∏–Ω–¥–µ–∫—Å–∞
        else:
            return None, None # –ü—É—Å—Ç–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫

    def auto_scale_y_axis(self, name, data_values):
        """Automatically scale the Y axis based on current data values with improved logic"""
        chart_data = self.charts.get(name)
        if not chart_data:
            return

        y_axis = chart_data["y_axis"]
        # + –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–Ω–∞—á–µ–Ω–∏–π
        history = self.data_history.setdefault(name, [])

        # + –ï—Å–ª–∏ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –ø—É—Å—Ç—ã–µ - –Ω–µ –º–µ–Ω—è–µ–º –º–∞—Å—à—Ç–∞–±
        if not data_values:
            return

        # + –†–∞–±–æ—Ç–∞–µ–º —Å –∏—Å—Ç–æ—Ä–∏–µ–π + —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        all_values = history + data_values

        # + –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ –µ—â–µ –º–∞–ª–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        # –í—Å–µ–≥–¥–∞ –≤—ã—á–∏—Å–ª—è–µ–º –º–∏–Ω/–º–∞–∫—Å –∏–∑ –≤—Å–µ—Ö —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        valid_values = []
        for v in all_values:
            if v is not None and not math.isnan(v):
                valid_values.append(v)
        if not valid_values:
            return
        current_min = min(valid_values)
        current_max = max(valid_values)

        # –≤—ã—á–∏—Å–ª—è–µ–º —Å–µ—Ä–µ–¥–∏–Ω—É –∏ —Ä–∞–∑–º–∞—Ö
        v_min = min(valid_values)
        v_max = max(valid_values)
        mid  = (v_min + v_max) / 2.0
        # –¥–æ–±–∞–≤–ª—è–µ–º 20% –∑–∞–ø–∞—Å–∞, –∏ –Ω–µ –¥–∞—ë–º span —É–ø–∞—Å—Ç—å –Ω–∏–∂–µ 0.1
        span = max((v_max - v_min) * 1.2, 0.1)

        # + –ù–µ –¥–æ–ø—É—Å–∫–∞–µ–º, —á—Ç–æ–±—ã –º–∏–Ω –∏ –º–∞–∫—Å –±—ã–ª–∏ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É
        if abs(current_max - current_min) < 0.1:
            current_min -= 0.5
            current_max += 0.5

        # + –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (20%)
        padding = (current_max - current_min) * 0.2
        new_min = current_min - padding
        new_max = current_max + padding
        new_min = mid - span/2
        new_max = mid + span/2

        current_axis_min = y_axis.min()
        current_axis_max = y_axis.max()
        now = time.time()
        if new_min < current_axis_min or new_max > current_axis_max:
            # ‚ûï —Å—Ä–∞–∑—É —Ä–∞—Å—à–∏—Ä—è–µ–º –¥–æ —ç–∫—Å—Ç—Ä–µ–º—É–º–∞ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –º–æ–º–µ–Ω—Ç
            self.last_extreme[name] = now
            y_axis.setRange(new_min, new_max)
            if chart_data.get("multi_axis"):
                for series in chart_data["series"][1:]:
                    for axis in chart_data["chart"].axes(Qt.Vertical, series):
                        axis.setRange(new_min, new_max)
            return

        # ‚ûï –ø–ª–∞–≤–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        # + –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞ –≤–º–µ—Å—Ç–æ —Ä–µ–∑–∫–æ–≥–æ
        current_axis_min = y_axis.min()
        current_axis_max = y_axis.max()

        smooth_factor = 0.2  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è‚Ä¶
        final_min = current_axis_min + (new_min - current_axis_min) * smooth_factor
        final_max = current_axis_max + (new_max - current_axis_max) * smooth_factor
        # + –ú–µ–Ω—è–µ–º –º–∞—Å—à—Ç–∞–± —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è
        threshold = (current_axis_max - current_axis_min) * 0.1  # 10% –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (abs(final_min - current_axis_min) > threshold or
            abs(final_max - current_axis_max) > threshold):
            y_axis.setRange(final_min, final_max)

            # + –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Å–∏ –≤ –º—É–ª—å—Ç–∏-–≥—Ä–∞—Ñ–∏–∫–∞—Ö
            if chart_data.get("multi_axis"):
                chart = chart_data["chart"]
                for i, series in enumerate(chart_data["series"]):
                    if i > 0:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å–µ—Ä–∏—é, —Ç.–∫. –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ—Å—å
                        axes = chart.axes(Qt.Vertical, series)
                        if axes:
                            for axis in axes:
                                axis.setRange(final_min, final_max)

    def _toggle_detach(self, wrapper):
        """Toggle detach/attach of chart-card, hide/show the original Detach button,
        and ensure cross-close also re-attaches."""
        grid    = self._grid_layout
        content = grid.parentWidget() if grid else None

        # ATTACH back if already detached
        if wrapper in self._detached_windows:
            win = self._detached_windows.pop(wrapper)
            # close the detached window
            win.close()
            # return card to saved grid position
            r, c = self._orig_pos.pop(wrapper)
            wrapper.setParent(content)
            grid.addWidget(wrapper, r, c)
            # reset flags
            wrapper.setProperty("detached", False)
            wrapper.setProperty("detached_win", None)
            # show the original Detach ("‚á±") button
            for btn in wrapper.findChildren(QPushButton):
                if btn.toolTip() == "Open chart in separate window":
                    btn.show()
            return

        # DETACH: remove from grid and open in its own window
        idx = grid.indexOf(wrapper)
        if idx < 0:
            print("[GraphsPage] detach: wrapper not in grid")
            return
        r, c, rs, cs = grid.getItemPosition(idx)
        self._orig_pos[wrapper] = (r, c)
        grid.removeWidget(wrapper)

        # create the new window
        win = QMainWindow()
        win.setWindowTitle(f"Chart: {wrapper.property('chart_name')}")
        container = QWidget()
        lay = QVBoxLayout(container)
        lay.setContentsMargins(0,0,0,0)

        # move the wrapper into the window
        wrapper.setParent(container)
        lay.addWidget(wrapper)

        # add a reattach button inside the window
        btn_reattach = QPushButton("‚àí")
        btn_reattach.setFixedSize(24,24)
        btn_reattach.setToolTip("Reattach chart")
        btn_reattach.clicked.connect(lambda _, w=wrapper: self._toggle_detach(w))
        lay.addWidget(btn_reattach, alignment=Qt.AlignLeft)

        win.setCentralWidget(container)

        # override closeEvent so cross-click also reattaches
        def close_and_reattach(event):
            # call toggle to reattach
            self._toggle_detach(wrapper)
            # accept the close
            event.accept()
        win.closeEvent = close_and_reattach

        win.show()

        # hide the original Detach button in the embedded wrapper
        for btn in wrapper.findChildren(QPushButton):
            if btn.toolTip() == "Open chart in separate window":
                btn.hide()

        # mark as detached
        wrapper.setProperty("detached", True)
        wrapper.setProperty("detached_win", win)
        self._detached_windows[wrapper] = win

    def _open_detach(self, name: str):
            """–ù–∞–π—Ç–∏ wrapper –ø–æ name –∏ –≤—ã–∑–≤–∞—Ç—å toggle."""
            # –∏—â–µ–º wrapper –≤–æ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
            for info in self.charts.values():
                # –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ view, –µ–≥–æ parent() ‚Äî wrapper
                wrapper = info["view"].parent()
                if wrapper.property("chart_name") == name:
                    # –≤—ã–∑—ã–≤–∞–µ–º –æ–±—â–∏–π toggle
                    self._toggle_detach(wrapper)
                    return
            print(f"[GraphsPage] Warning: no chart wrapper found for '{name}'")

    @Slot(object, str)
    def _save_chart_png(self, chart_view, name: str):
        # parent –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ ‚Äî –æ–∫–Ω–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–µ–π—á–∞—Å chart_view
        parent_win = chart_view.window() or self
        path, _ = QFileDialog.getSaveFileName(
            parent_win,
            f"Save chart ¬´{name}¬ª as PNG",
            f"{name}.png",
            "PNG Files (*.png)"
        )
        if not path:
            return
        # —Å–Ω–∏–º–µ–º ¬´—Å–∫—Ä–∏–Ω¬ª –∏ —Å–±—Ä–æ—Å–∏–º —Å–æ–±—ã—Ç–∏—è, —á—Ç–æ–±—ã UI –Ω–µ –∑–∞–≤–∏—Å
        pix = chart_view.grab()
        QApplication.processEvents()
        if not pix.save(path, "PNG"):
            print(f"[GraphsPage] Failed to save PNG to {path}")

    def save_layout(self):
        """Save current grid positions into config.ini as name:row:col,..."""
        import configparser
        # –ø–æ–ª—É—á–∞–µ–º layout, –≤ –∫–æ—Ç–æ—Ä–æ–º –ª–µ–∂–∞—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
        layout = self._grid_layout

        pairs = []
        # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ layout
        for idx in range(layout.count()):
            item = layout.itemAt(idx)
            w = item.widget()
            if not w: continue
            name = w.property("chart_name")
            # —É–∑–Ω–∞—ë–º –≥–¥–µ –æ–Ω
            r, c, rs, cs = layout.getItemPosition(idx)
            pairs.append(f"{name}:{r}:{c}")

        cfg = configparser.ConfigParser()
        cfg.read("config.ini")
        if "Layout" not in cfg:
            cfg["Layout"] = {}
        cfg["Layout"]["chart_positions"] = ",".join(pairs)
        with open("config.ini", "w") as f:
            cfg.write(f)

    @Slot(dict)
    def update_charts(self, data):

        charts_to_update = set() # –°–æ–±–∏—Ä–∞–µ–º –∏–º–µ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å

        # --- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–µ–º _series_map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è --- (–ò–∑–º–µ–Ω–µ–Ω–æ)
        for key, value in data.items():
            if key in self._series_map:
                series_targets = self._series_map[key]
                for series, index in series_targets:
                    actual_value = None
                    if index is not None: # –ò—Å—Ç–æ—á–Ω–∏–∫ –≤–∏–¥–∞ key[index]
                        if isinstance(value, (list, tuple)) and len(value) > index:
                            actual_value = value[index]
                    else: # –ü—Ä—è–º–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ (key)
                        actual_value = value

                    if actual_value is not None:
                        # –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞—Ñ–∏–∫, –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Å–µ—Ä–∏—è (–Ω–µ–º–Ω–æ–≥–æ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ, –Ω–æ –ª—É—á—à–µ —á–µ–º –±—ã–ª–æ)
                        chart_name = None
                        chart_info = None
                        for name, info in self.charts.items():
                            if info.get("multi_axis"):
                                if series in info.get("series", []):
                                    chart_name = name
                                    chart_info = info
                                    break
                            elif info.get("series") == series:
                                chart_name = name
                                chart_info = info
                                break

                        if chart_name and chart_info:
                            charts_to_update.add(chart_name)
                            max_points = self.data_points.get(chart_name, 200) # TODO: –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å max_points –≤ chart_info

                            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Å—à—Ç–∞–±–∞ (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç—Å—Ç—É–ø—ã)
                            hist = self.data_history.setdefault(chart_name, [])
                            hist.append(actual_value)
                            max_hist = max_points * 3
                            if len(hist) > max_hist:
                                hist[:] = hist[-max_hist:]

                            # --- –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º X –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å --- (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç—Å—Ç—É–ø—ã)
                            current_x_index = self.indexes.get(chart_name, 0)
                            series.append(current_x_index, actual_value) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –∫–∞–∫ X
                            self.indexes[chart_name] = current_x_index + 1 # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å

                            # --- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ—á–∫–∏ –ü–û–°–õ–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏—è --- (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç—Å—Ç—É–ø—ã)
                            while series.count() > max_points:
                                series.removePoints(0, 1) # –£–¥–∞–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–π —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π —Ç–æ—á–∫–µ

        # --- –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–∏ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ --- (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç—Å—Ç—É–ø—ã)
        for chart_name in charts_to_update:
            chart_info = self.charts.get(chart_name)
            if not chart_info: continue

            chart_view = chart_info["view"]
            try:
                chart_view.setUpdatesEnabled(False)
            except RuntimeError:
                continue # View might be closed

            # –ê–≤—Ç–æ–º–∞—Å—à—Ç–∞–± (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏)
            hist = self.data_history.get(chart_name, [])
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –Ω–µ –Ω–∞ –∫–∞–∂–¥—É—é —Ç–æ—á–∫—É, –∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑ –≤ 5 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            if len(hist) % 5 == 0:
                self.auto_scale_y_axis(chart_name, [hist[-1]])
            #if hist: # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–∏–ª–∏ –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é?)
                #self.auto_scale_y_axis(chart_name, [hist[-1]] if hist else []) # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é?
                # –ò–ª–∏ self.auto_scale_y_axis(chart_name, hist) # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏?

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–∏ X (–º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –¥–µ–ª–∞—Ç—å 1 —Ä–∞–∑)
            x_axis = chart_info["x_axis"]
            series_to_count = chart_info["series"]
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å–µ—Ä–∏—é –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ—á–µ–∫ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤—Å–µ—Ö —Å–µ—Ä–∏–π –≥—Ä–∞—Ñ–∏–∫–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª-–≤–æ)
            count_series = series_to_count[0] if chart_info.get("multi_axis") else series_to_count
            current_total_count = count_series.count()
            max_points_x = self.data_points.get(chart_name, 200)
            # --- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å X –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ --- (–ò–∑–º–µ–Ω–µ–Ω–æ)
            current_max_x = self.indexes.get(chart_name, 0) # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô X
            x_axis.setRange(max(0, current_max_x - max_points_x), current_max_x + 5)

            try:
                chart_view.setUpdatesEnabled(True)
            except RuntimeError:
                pass # View might be closed
            chart_view.update()

    def showEvent(self, event):
        super().showEvent(event)
        # Refresh all chart views when the page is shown
        # Use QTimer.singleShot to ensure updates happen after the event loop is processed
        def refresh_charts():
            for info in self.charts.values():
                try:
                    if info.get("view"): info["view"].update()
                except Exception as e:
                    print(f"[GraphsPage] Error refreshing chart in showEvent: {e}")
        QTimer.singleShot(0, refresh_charts)

# === –°–¢–†–ê–ù–ò–¶–ê –õ–û–ì–û–í + –≠–ö–°–ü–û–†–¢ –í ZIP ===
class LogPage(QWidget):
    def __init__(self):
        super().__init__()
        self.error_list: list[str] = []
        layout = QVBoxLayout(self); layout.setContentsMargins(15,15,15,15)
        self.log_entries: list[tuple[str,str]] = []  # —Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä—ã (raw, html)
        # --- Search filter ---
        self.search_edit = QLineEdit()
        self.search_edit.setPlaceholderText("Search logs...")
        self.search_edit.textChanged.connect(self.filter_logs)
        layout.addWidget(self.search_edit)
        header = QLabel("–°–∏—Å—Ç–µ–º–Ω—ã–π –∂—É—Ä–Ω–∞–ª")
        header.setStyleSheet(f"""
            font-size: 16pt; font-weight: bold; color: {COLORS['text_primary']}; margin-bottom:10px
        """)
        self.log_text = QTextEdit();
        self.log_text.setReadOnly(True)
        # –≤–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é —Å Copy
        self.log_text.setContextMenuPolicy(Qt.ContextMenuPolicy.DefaultContextMenu)
        self.log_text.setFont(QFont("Consolas",10))
        self.log_text.setStyleSheet(f"""
            QTextEdit {{ background: {COLORS['bg_dark']}; color: {COLORS['text_primary']};
            border-radius:6px; padding:10px; border:none }}
        """)
        buttons_layout = QHBoxLayout()
        self.clear_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥")
        self.save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥")
        self.export_btn = QPushButton("–≠–∫—Å–ø–æ—Ä—Ç ZIP")
        for btn in (self.clear_btn, self.save_btn, self.export_btn):
            btn.setFixedHeight(40)
            btn.setStyleSheet(f"""
                QPushButton {{
                    background-color: {COLORS['bg_panel']};
                    color: {COLORS['text_primary']};
                    border-radius:8px; font-size:11pt; padding:0 20px;
                }}
                QPushButton:hover {{ background-color: {COLORS['accent_darker']}; }}
                QPushButton:pressed {{ background-color: {COLORS['accent']}; }}
            """)
        self.clear_btn.clicked.connect(self.clear_log)
        self.save_btn.clicked.connect(self.save_log)
        self.export_btn.clicked.connect(self.export_logs)
        # –∞–≤—Ç–æ-—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        self.auto_save_timer = QTimer(self)
        self.auto_save_timer.timeout.connect(self._on_auto_save)
        buttons_layout.addWidget(self.clear_btn)
        buttons_layout.addWidget(self.save_btn)
        buttons_layout.addWidget(self.export_btn)
        # +++ –ö–Ω–æ–ø–∫–∞ ¬´–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞¬ª +++
        self.report_btn = QPushButton("–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞")
        self.report_btn.setFixedHeight(40)
        self.report_btn.setStyleSheet(self.export_btn.styleSheet())
        self.report_btn.clicked.connect(self.export_report)
        buttons_layout.addWidget(self.report_btn)
        buttons_layout.addStretch()
        layout.addWidget(header); layout.addWidget(self.log_text); layout.addLayout(buttons_layout)
        # —Ç–∞–π–º–µ—Ä-–¥–µ–±–∞—É–Ω—Å–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Å–∫–µ–π–ª–∞

    @Slot(str)
    def configure_auto_save(self, enabled: bool, interval_min: int):
        if self.auto_save_timer.isActive():
            self.auto_save_timer.stop()
        if enabled:
            self.auto_save_timer.start(interval_min * 60 * 1000)

    @Slot()
    def _on_auto_save(self):
        # –ø–æ–º–µ—Ç–∏–º, —á—Ç–æ —ç—Ç–æ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        ts = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.add_log_message(f"[AUTO] –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤: {ts}")
        self.save_log()

    @Slot(str)
    def add_log_message(self, message):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ —É—Ä–æ–≤–Ω—é
        level = "info"
        if message.startswith("[ERROR]"):
            level = "danger"
        elif message.startswith("[WARNING]"):
            level = "warning"
        color = {
            "info":    COLORS["text_secondary"],
            "warning": COLORS["warning"],
            "danger":  COLORS["danger"],
        }[level]
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—ã—Ä–æ–µ –∏ HTML-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        raw  = f"{datetime.datetime.now().strftime('%H:%M:%S')} {message}"
        html = f'<span style="color:{color};">{raw}</span>'
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ QTextEdit
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–æ—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –≤ error_list
        if level in ("warning", "danger"):
            self.error_list.append(raw)
        #self.log_entries.append((raw, html))
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–æ—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –≤ error_list
        if level in ("warning", "danger"):
            self.error_list.append(raw)
        self.log_entries.append((raw, html))
        self.log_text.append(html)
        self.log_text.verticalScrollBar().setValue(
            self.log_text.verticalScrollBar().maximum()
        )

    def clear_log(self):
        self.log_text.clear()
        self.log_entries.clear()
        from PySide6.QtWidgets import QApplication
        mw = QApplication.activeWindow()
        if hasattr(mw, "notify"):
            mw.notify("Logs cleared", "info")

    def filter_logs(self, text):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—ã—Ä—ã–º —Å—Ç—Ä–æ–∫–∞–º, –≤—ã–≤–æ–¥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ü–≤–µ—Ç–∞."""
        self.log_text.clear()
        for raw, html in self.log_entries:
            if text.lower() in raw.lower():
                self.log_text.append(html)
        self.log_text.verticalScrollBar().setValue(
            self.log_text.verticalScrollBar().maximum()
        )

    def save_log(self):
        now = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        path = f"log/system_log_{now}.txt"
        try:
            with open(path, "w", encoding="utf-8") as f:
                f.write(self.log_text.toPlainText())
            msg = f"[{datetime.datetime.now()}] –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {path}"
            self.add_log_message(msg)
            from PySide6.QtWidgets import QApplication
            mw = QApplication.activeWindow()
            if hasattr(mw, "notify"):
                mw.notify("Log saved", "success")
        except Exception as e:
            self.add_log_message(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥: {e}")

    @Slot()
    def export_logs(self):
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
            self.add_log_message(f"[{datetime.datetime.now()}] –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ ZIP...")
            if not os.path.isdir("log"):
                return
            self._export_thread = ExportLogsThread(log_dir="log")
            self._export_thread.finished.connect(self._on_export_finished)
            self._export_thread.start()

    @Slot()
    def export_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ–π —Å–µ—Å—Å–∏–∏ –≤ HTML.""" # –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ
        from PySide6.QtWidgets import QFileDialog
        # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è PDF
        # from PySide6.QtGui import QTextDocument
        from PySide6.QtCore import QBuffer
        # from PySide6.QtPrintSupport import QPrinter

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞–∫ HTML
        path, _ = QFileDialog.getSaveFileName(
            self, "Export report", "", "HTML Files (*.html)"
        )
        if not path:
            return

        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        mw = self.window()

        # –õ–æ–≥–∏ –∏ –æ—à–∏–±–∫–∏
        logs = self.log_text.toPlainText()
        errors = "\n".join(self.error_list)

        # –ö–∞—Ä—Ç–∏–Ω–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        imgs = {}
        if hasattr(mw, "graphs"):
            for name, chart_data in mw.graphs.charts.items():
                pix = chart_data["view"].grab()
                buf = QBuffer()
                buf.open(QBuffer.ReadWrite)
                pix.save(buf, "PNG")
                b64 = buf.data().toBase64().data().decode()
                imgs[name] = b64

        # HTML - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π
        html = "<html><head><style>"
        html += "body{background:#1a1a1a;color:#ffffff;font-family:Segoe UI;}"
        html += ".card{background:#242424;padding:10px;margin:10px;border-radius:8px;}"
        html += "h1,h2{color:" + COLORS["accent"] + ";}</style></head><body>"
        html += "<h1>Telemetry Report</h1><h2>Logs</h2><pre>{}</pre>".format(logs)
        html += "<h2>Errors</h2><pre>{}</pre><h2>Charts</h2>".format(errors)
        for name, b64 in imgs.items():
            html += f"<div class='card'><h3>{name}</h3>"
            html += f"<img src='data:image/png;base64,{b64}'/></div>"
        html += "</body></html>"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –Ω–∞–ø—Ä—è–º—É—é
        try:
            with open(path, "w", encoding="utf-8") as f:
                f.write(html)
            msg = f"HTML report saved to {path}"
            # –õ–æ–≥ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            self.add_log_message(f"[AUTO] {msg}")
            if hasattr(mw, "notify"):
                mw.notify("Report exported", "success")
        except Exception as e:
            msg = f"Failed to save HTML report: {e}"
            self.add_log_message(f"[ERROR] {msg}")
            if hasattr(mw, "notify") :
                 mw.notify(msg, "danger")

    @Slot(str, bool, str)
    def _on_export_finished(self, archive: str, success: bool, error: str):
        if success:
            self.add_log_message(f"[{datetime.datetime.now()}] –õ–æ–≥–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {archive}")
            from PySide6.QtWidgets import QApplication
            mw = QApplication.activeWindow()
            if hasattr(mw, "notify"):
                mw.notify("Logs ZIP exported", "success")
        else:
            self.add_log_message(f"[ERROR] –≠–∫—Å–ø–æ—Ä—Ç ZIP –Ω–µ —É–¥–∞–ª—Å—è: {error}")

    def get_errors(self) -> list[str]:
        """–í–µ—Ä–Ω—É—Ç—å –≤—Å–µ WARN/ERROR —Å–æ–æ–±—â–µ–Ω–∏—è."""
        return self.error_list

# === –°–¢–†–ê–ù–ò–¶–ê –ù–ê–°–¢–†–û–ï–ö + .ini ===
class SettingsPage(QWidget):
    settings_changed      = Signal(bool, str, int)
    simulator_changed     = Signal(bool, str)

    def __init__(self):
        super().__init__()
        self.cfg = configparser.ConfigParser()
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –µ—Å—Ç—å —Å–µ–∫—Ü–∏—è, –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç
        self.cfg.read_dict({"UDP": {}, "Settings": {}, "SimulationHistory": {}, "Layout": {}})
        if os.path.isfile("config.ini"):
            self.cfg.read("config.ini")

        # --- –ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ ---
        self.roll   = 0.0
        self.pitch  = 0.0
        self.alpha  = 0.98   # –≤–µ—Å –≥–∏—Ä–æ—Å–∫–æ–ø–∞ –≤ –∫–æ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–æ–º —Ñ–∏–ª—å—Ç—Ä–µ

        # --- Read saved settings ---
        udp_enabled  = self.cfg.get("UDP", "enabled", fallback="False") == "True"
        host         = self.cfg.get("UDP", "host",    fallback="127.0.0.1")
        try:
            port = int(self.cfg.get("UDP", "port", fallback="5005"))
        except ValueError:
            port = 5005
        sim_enabled  = self.cfg.get("Settings", "simulation",    fallback="False") == "True"
        auto_save    = self.cfg.getboolean("Settings", "auto_save",            fallback=False)
        auto_interval= self.cfg.getint    ("Settings", "auto_save_interval",  fallback=5)
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)

        header = QLabel("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        header.setStyleSheet(f"""
            font-size:18pt; font-weight:bold; color:{COLORS['text_primary']};
            margin-bottom:20px
        """)
        layout.addWidget(header)

        # --- UDP settings ---
        udp_card = QFrame()
        udp_card.setObjectName("card")
        v = QVBoxLayout(udp_card)
        lab = QLabel("<b>UDP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>")
        lab.setStyleSheet("font-size:14pt;")
        self.udp_enable = QCheckBox("–í–∫–ª—é—á–∏—Ç—å UDP –æ—Ç–ø—Ä–∞–≤–∫—É")
        self.udp_enable.setChecked(udp_enabled)
        self.udp_ip     = QLineEdit(host)
        self.udp_ip.setPlaceholderText("IP –∞–¥—Ä–µ—Å")
        self.udp_port   = QLineEdit(str(port))
        self.udp_port.setPlaceholderText("–ü–æ—Ä—Ç")
        for w in (lab, self.udp_enable, self.udp_ip, self.udp_port):
            v.addWidget(w)
        layout.addWidget(udp_card)

        # --- Simulation from file ---
        sim_card = QFrame()
        sim_card.setObjectName("card")
        v2 = QVBoxLayout(sim_card)
        lab2 = QLabel("<b>–ò–º–∏—Ç–∞—Ü–∏—è –∏–∑ —Ñ–∞–π–ª–∞</b>")
        self.sim_enable    = QCheckBox("–í–∫–ª—é—á–∏—Ç—å –∏–º–∏—Ç–∞—Ü–∏—é")
        self.sim_enable.setChecked(sim_enabled)
        self.sim_file_path = QLineEdit()
        self.sim_file_path.setPlaceholderText("–ü—É—Ç—å –∫ –±–∏–Ω–∞—Ä–Ω–æ–º—É –ª–æ–≥-—Ñ–∞–π–ª—É")
        self.sim_file_path.setReadOnly(True)
        btn_browse = QPushButton("–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª")
        btn_browse.clicked.connect(self.browse_sim_file)
        # –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤
        self.history_combo = QComboBox()
        hist = self.cfg.get("SimulationHistory", "last_files", fallback="").split(",")
        hist = [p for p in hist if p]
        self.history_combo.addItems(hist)
        self.history_combo.setToolTip("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ñ–∞–π–ª–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏")
        self.history_combo.currentTextChanged.connect(
            lambda path: (self.sim_file_path.setText(path),
                          self.simulator_changed.emit(True, path))
        )
        # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ layout
        v2.addWidget(QLabel("–ò—Å—Ç–æ—Ä–∏—è —Ñ–∞–π–ª–æ–≤"))
        v2.addWidget(self.history_combo)
        v2.addWidget(lab2)
        v2.addWidget(self.sim_enable)
        hl = QHBoxLayout()
        hl.addWidget(self.sim_file_path)
        hl.addWidget(btn_browse)
        v2.addLayout(hl)
        layout.addWidget(sim_card)
        # –≠–º–∏—Ç–∏–º —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∞–∂–∞—Ç–∏—é Save
        # Disable simulation block when UDP is on
        # –ö–æ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º UDP ‚Äî –≤—ã–∫–ª—é—á–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é, –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
        self.udp_enable.stateChanged.connect(lambda state: (
            # –µ—Å–ª–∏ UDP –≤–∫–ª—é—á–∏–ª–∏ ‚Äî —É–±–∏—Ä–∞–µ–º –≥–∞–ª–æ—á–∫—É –∏ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
            self.sim_enable.setChecked(False) if state else None,
            self.sim_enable.setEnabled(not state),
            self.sim_file_path.setEnabled(not state),
            btn_browse.setEnabled(not state)
        ))
        self.sim_enable.stateChanged.connect(lambda state: (
            # –µ—Å–ª–∏ —Å–∏–º—É–ª—è—Ü–∏—é –≤–∫–ª—é—á–∏–ª–∏ ‚Äî —É–±–∏—Ä–∞–µ–º –≥–∞–ª–æ—á–∫—É –∏ –±–ª–æ–∫–∏—Ä—É–µ–º UDP
            self.udp_enable.setChecked(False) if state else None,
            self.udp_enable.setEnabled(not state),
            self.udp_ip.setEnabled(not state),
            self.udp_port.setEnabled(not state)
        ))
        # initial enable/disable
        self.sim_enable.setEnabled(not udp_enabled)
        self.sim_file_path.setEnabled(not udp_enabled)
        btn_browse.setEnabled(not udp_enabled)

        # --- Save button ---
        self.save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.save_btn.setFixedHeight(40)
        self.save_btn.setStyleSheet(f"""
            QPushButton {{
                background: {COLORS["bg_panel"]};
                color:{COLORS['text_primary']};
                border-radius:6px; font-size:11pt;
                padding:0 20px
            }}
            QPushButton:hover {{ background: {COLORS["accent_darker"]}; }}
            QPushButton:pressed {{ background: {COLORS["accent"]}; }}
        """)
        self.save_btn.clicked.connect(self.save_settings)
        # --- Auto-save logs every N minutes ---
        # wrap into card
        auto_card = QFrame()
        auto_card.setObjectName("card")
        v_auto = QVBoxLayout(auto_card)
        self.auto_save_chk = QCheckBox("–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç")
        self.auto_save_spin = QSpinBox()
        self.auto_save_spin.setRange(1, 60)
        self.auto_save_chk.setChecked(auto_save)
        self.auto_save_spin.setValue(auto_interval)
        h = QHBoxLayout()
        h.addWidget(self.auto_save_chk)
        h.addWidget(self.auto_save_spin)
        v_auto.addLayout(h)
        layout.addWidget(auto_card)
        # --- Reset graph layout ---
        self.reset_layout_btn = QPushButton("–°–±—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤")
        self.reset_layout_btn.setObjectName("resetLayoutBtn")
        self.reset_layout_btn.setFixedHeight(30)
        self.reset_layout_btn.clicked.connect(self._reset_graph_layout)
        # wrap reset button into its own card
        reset_card = QFrame()
        reset_card.setObjectName("card")
        v_reset = QVBoxLayout(reset_card)
        v_reset.addWidget(self.reset_layout_btn, alignment=Qt.AlignCenter)
        layout.addWidget(reset_card)
        layout.addStretch()
        layout.addWidget(self.save_btn)
    def save_settings(self):
        # UDP section
        self.cfg["UDP"] = {
            "enabled": str(self.udp_enable.isChecked()),
            "host":    self.udp_ip.text(),
            "port":    self.udp_port.text()
        }
        # Settings section (simulation)
        if "Settings" not in self.cfg:
            self.cfg["Settings"] = {}
        self.cfg["Settings"]["simulation"]    = str(self.sim_enable.isChecked())

        # store auto-save into cfg
        self.cfg["Settings"]["auto_save"] = str(self.auto_save_chk.isChecked())
        self.cfg["Settings"]["auto_save_interval"] = str(self.auto_save_spin.value())
        # Write to file
        with open("config.ini", "w") as f:
            self.cfg.write(f)
        # store auto-save
        self.cfg["Settings"]["auto_save"] = str(self.auto_save_chk.isChecked())
        self.cfg["Settings"]["auto_save_interval"] = str(self.auto_save_spin.value())

        # Emit signals
        self.settings_changed.emit(
            self.udp_enable.isChecked(),
            self.udp_ip.text(),
            int(self.udp_port.text() or 0)
        )
        self.simulator_changed.emit(
            self.sim_enable.isChecked(),
            self.sim_file_path.text()
        )
        # —É–≤–µ–¥–æ–º–ª—è–µ–º
        from PySide6.QtWidgets import QApplication
        mw = QApplication.activeWindow()
        if hasattr(mw, "notify"):
            mw.notify("Settings saved", "success")

        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ nazemkakom.py --- (–£–¥–∞–ª–µ–Ω–æ)
        # try:
        #     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ nazemkakom.py
        #     with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as notify_sock:
        #         notify_sock.sendto(b"NEW_USER_CONFIGURED", ('127.0.0.1', self.CONTROL_PORT))
        #         print(f"[Settings] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ NEW_USER_CONFIGURED –Ω–∞ 127.0.0.1:{self.CONTROL_PORT}")
        #         # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ LogPage –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
        #         if hasattr(mw, 'log_page'):
        #             timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        #             mw.log_page.add_log_message(f"[{timestamp}] [INFO] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–∑–µ–º–∫–µ (–ø–æ—Ä—Ç {self.CONTROL_PORT}).")
        # except Exception as e:
        #     print(f"[Settings] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ nazemkakom: {e}")
        #     # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ LogPage –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
        #     if hasattr(mw, 'log_page'):
        #          timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        #          # –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ self.CONTROL_PORT
        #          mw.log_page.add_log_message(f"[{timestamp}] [WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–∑–µ–º–∫–µ: {e}")

    from PySide6.QtWidgets import QFileDialog

    def browse_sim_file(self):
            """–û—Ç–∫—Ä—ã—Ç—å –Ω–µ–º–æ–¥–∞–ª—å–Ω—ã–π Qt-–¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –±–µ–∑ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–≤–∏—Å–∞–Ω–∏—è."""
            dlg = QFileDialog(self.window(), "–í—ã–±—Ä–∞—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª",
                             self.sim_file_path.text() or os.getcwd())
            dlg.setFileMode(QFileDialog.ExistingFile)
            dlg.setNameFilter("Binary files (*.bin);;All files (*)")
            dlg.setOption(QFileDialog.DontUseNativeDialog, True)  # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Qt-–¥–∏–∞–ª–æ–≥
            dlg.fileSelected.connect(self._on_sim_file_chosen)
            dlg.open()

    def _on_sim_file_chosen(self, path: str):
            """–°–ª–æ—Ç –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–π–ª–∞: –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ, –∏—Å—Ç–æ—Ä–∏—é –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é."""
            self.sim_file_path.setText(path)
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            hist = self.cfg.get("SimulationHistory", "last_files", fallback="").split(",")
            hist = [p for p in hist if p and p != path]
            hist.insert(0, path)
            hist = hist[:5]
            self.cfg["SimulationHistory"] = {"last_files": ",".join(hist)}
            with open("config.ini", "w") as f:
                self.cfg.write(f)
            self.history_combo.clear()
            self.history_combo.addItems(hist)
            # –≠–º–∏—Ç–∏–º —Å–∏–≥–Ω–∞–ª
            self.simulator_changed.emit(True, path)

    def _reset_graph_layout(self):
        """–°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –≥—Ä–∞—Ñ–∏–∫–æ–≤."""
        import configparser
        from PySide6.QtWidgets import QMessageBox

        cfg = configparser.ConfigParser()
        cfg.read("config.ini")
        if cfg.has_section("Layout") and cfg.has_option("Layout", "graph_order"):
            cfg.remove_option("Layout", "graph_order")
            with open("config.ini", "w") as f:
                cfg.write(f)
        QMessageBox.information(self, "–°–±—Ä–æ—Å",
                                "–ü–æ—Ä—è–¥–æ–∫ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å–±—Ä–æ—à–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")

class ConsolePage(QWidget):
    """–ü—Ä–æ—Å—Ç–µ–π—à–∞—è –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∫–æ–º–∞–Ω–¥ TelemetryWorker."""
    def __init__(self):
        super().__init__()
        self.setLayout(QVBoxLayout())
        self.output = QPlainTextEdit()
        self.output.setReadOnly(True)
        ConsoleHighlighter(self.output)
        self.input = QLineEdit()
        self.input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ Enter‚Ä¶")
        self.layout().addWidget(self.output)
        self.layout().addWidget(self.input)
        self.input.returnPressed.connect(self._on_enter)
        self.output.setStyleSheet("font-family: Consolas, monospace;")
        # + –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ ‚Äî —Å–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
        from PySide6.QtWidgets import QCompleter
        self.cmds = [
            "pause","resume","help","version","errors","exit","quit","ping","fps","events",
            "clear logs","clear errors","export report","export logs","export zip",
            "load bin","udp enable","udp disable","sensor info","log","simulate error"
        ]
        # + –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞—ë–º QCompleter –Ω–∞ –æ—Å–Ω–æ–≤–µ self.cmds
        self.completer = QCompleter(self.cmds, self.input)
        self.completer.setCaseSensitivity(Qt.CaseInsensitive)
        self.input.setCompleter(self.completer)
        # –∏—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥
        import json, os
        hist_file = "console_history.json"
        if os.path.exists(hist_file):
            try:
                with open(hist_file, "r") as f:
                    self._history = json.load(f)
            except (json.JSONDecodeError, IOError):
                self._history = []
        else:
            self._history = []
        self._hist_idx = -1
        # –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å—Ç—Ä–µ–ª–æ–∫
        self.input.installEventFilter(self)

    def eventFilter(self, obj, ev):
        from PySide6.QtCore import QEvent, Qt
        if obj is self.input and ev.type() == QEvent.KeyPress:
            key = ev.key()
            if key in (Qt.Key_Up, Qt.Key_Down):
                if not self._history:
                    return False
                # –ø–µ—Ä–µ–º–µ—â–∞–µ–º –∏–Ω–¥–µ–∫—Å
                if key == Qt.Key_Up:
                    self._hist_idx = max(0, self._hist_idx - 1)
                else:
                    self._hist_idx = min(len(self._history)-1, self._hist_idx + 1)
                # –≤—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
                self.input.setText(self._history[self._hist_idx])
                return True
        return super().eventFilter(obj, ev)

    def _on_enter(self):
        cmd = self.input.text().strip()
        if not cmd:
            return
        # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        self._history.append(cmd)
        self._hist_idx = len(self._history)
        # —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–∞–π–ª
        import json
        with open("console_history.json", "w") as f:
            json.dump(self._history, f)
        # –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏
        self.output.appendPlainText(f"> {cmd}")
        # –ø–æ—Å–ª–∞—Ç—å —Å–∏–≥–Ω–∞–ª
        self.command_entered.emit(cmd)
        self.input.clear()

    # —Å–∏–≥–Ω–∞–ª –∫–æ–º–∞–Ω–¥
    command_entered = Signal(str)

    def write_response(self, text: str):
        self.output.appendPlainText(text)

class ConsoleHighlighter(QSyntaxHighlighter):
    def __init__(self, parent):
        super().__init__(parent.document())
        self.rules = []
        def make(fmt, pattern):
            self.rules.append((QRegularExpression(pattern), fmt))

        # —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥
        fmt_cmd = QTextCharFormat()
        fmt_cmd.setForeground(QColor(COLORS["accent"]))
        fmt_cmd.setFontWeight(QFont.Bold)

        # –≤—Å–µ –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        single = [
            "pause","resume","help","version","errors",
            "exit","quit","ping","fps","events"
        ]
        # –∫–æ–º–∞–Ω–¥—ã –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤
        multi = [
            "clear logs","clear errors",
            "export report","export logs","export zip",
            "load bin","udp enable","udp disable",
            "sensor info","log","simulate error"
        ]
        # –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
        for kw in single:
            make(fmt_cmd, rf"\b{kw}\b")
        for cmd in multi:
            pat = r"\b" + cmd.replace(" ", r"\s+") + r"\b"
            make(fmt_cmd, pat)

        # —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—à–∏–±–æ–∫ –∏ WARN
        fmt_err = QTextCharFormat()
        fmt_err.setForeground(QColor(COLORS["danger"]))
        fmt_err.setFontWeight(QFont.Bold)
        make(fmt_err, r"\bERROR\b.*")

        fmt_warn = QTextCharFormat()
        fmt_warn.setForeground(QColor(COLORS["warning"]))
        make(fmt_warn, r"\bWARNING\b.*")

    def highlightBlock(self, text):
        for expr, fmt in self.rules:
            it = expr.globalMatch(text)
            while it.hasNext():
                m = it.next()
                self.setFormat(m.capturedStart(), m.capturedLength(), fmt)


class Notification(QWidget):
    """–í—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (toast)."""
    def __init__(self, message, level="info", duration=3000, parent=None):
        super().__init__(parent, Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.Tool)
        self.setAttribute(Qt.WA_TranslucentBackground)
        # —Ñ–æ–Ω –ø–æ —É—Ä–æ–≤–Ω—é
        bg = {
            "info":    COLORS["info"],
            "success": COLORS["success"],
            "warning": COLORS["warning"],
            "danger":  COLORS["danger"]
        }.get(level, COLORS["info"])
        # —Ñ–æ–Ω + —Ç–µ–Ω—å
        self.setStyleSheet(f"background-color:{bg}; border-radius:8px;")
        shadow = QGraphicsDropShadowEffect(self)
        shadow.setBlurRadius(20)
        shadow.setOffset(0,4)
        shadow.setColor(QColor(0,0,0,160))
        self.setGraphicsEffect(shadow)
        lbl = QLabel(message, self)
        lbl.setStyleSheet(f"color:{COLORS['text_primary']}; padding:8px;")
        lay = QHBoxLayout(self)
        lay.addWidget(lbl)
        self.adjustSize()
        # fade in
        self.setWindowOpacity(0.0)
        anim_in = QPropertyAnimation(self, b"windowOpacity", self)
        anim_in.setDuration(300)
        anim_in.setStartValue(0.0)
        anim_in.setEndValue(1.0)
        anim_in.start()
        # fade out –ø–æ —Ç–∞–π–º–µ—Ä—É, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤ –ø–æ–ª–µ
        def start_fade_out():
            self._fade_out_anim = QPropertyAnimation(self, b"windowOpacity", self)
            self._fade_out_anim.setDuration(500)
            self._fade_out_anim.setStartValue(1.0)
            self._fade_out_anim.setEndValue(0.0)
            self._fade_out_anim.finished.connect(self.close)
            self._fade_out_anim.start()
        QTimer.singleShot(duration, start_fade_out)

class MapPage(QWidget):
    """–û—Ç–¥–µ–ª—å–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ —Å –∫–∞—Ä—Ç–æ–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–∞–Ω/–∑—É–º."""
    def __init__(self):
        super().__init__()
        # Layout
        layout = QVBoxLayout(self)
        layout.setContentsMargins(10,10,10,10)
        # QML-–∫–∞—Ä—Ç–∞
        self.map_widget = QQuickWidget()
        self.map_widget.setResizeMode(QQuickWidget.SizeRootObjectToView)
        qml_path = os.path.join(BASE_PATH, "MapView.qml")
        self.map_widget.setSource(QUrl.fromLocalFile(qml_path))
        # –†–∞—Å—Ç—è–∂–µ–Ω–∏–µ –∏ –º–∏–Ω–∏–º—É–º –ø–æ –≤—ã—Å–æ—Ç–µ
        self.map_widget.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.map_widget.setMinimumHeight(400)
        layout.addWidget(self.map_widget)
        # Root-–æ–±—ä–µ–∫—Ç QML –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ Python
        self.map_root = self.map_widget.rootObject()

    def set_worker(self, worker):
        """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º GPS-–¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã."""
        self.worker = worker
        worker.data_ready.connect(self.on_map_data)

    @Slot(dict)
    def on_map_data(self, data):
        """–û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã –ø—Ä–∏ –ø—Ä–∏—Ö–æ–¥–µ –Ω–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç."""
        # --- –£–¥–∞–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ --- (–£–¥–∞–ª–µ–Ω–æ)
        # print(f"[DBG MapPage] on_map_data received: {data}") # DEBUG 1
        lat, lon, _ = data.get("gps", (0,0,0))
        gps_fix = data.get("gps_fix", 0)
        # print(f"[DBG MapPage] Extracted lat={lat}, lon={lon}, fix={gps_fix}") # DEBUG 2
        # Check if fix is valid (>0) and coordinates are non-zero (or at least one is non-zero)
        # if data.get("gps_fix", 0) > 0 and (lat or lon): # Old line
        if gps_fix > 0 and (lat != 0.0 or lon != 0.0) and self.map_root: # More explicit check for non-zero coords
            # print(f"[DBG MapPage] Condition met (fix > 0 and lat/lon != 0). Setting properties...") # DEBUG 3
            # –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ QML —É Map –µ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ 'latitude'/'longitude'
            try:
                # Check return value of setProperty
                ret_lat = self.map_root.setProperty("latitude", lat)
                ret_lon = self.map_root.setProperty("longitude", lon)
                # print(f"[DBG MapPage] setProperty results: lat_ok={ret_lat}, lon_ok={ret_lon}") # DEBUG 4
                if not ret_lat or not ret_lon:
                     print("[MapPage] WARNING: setProperty failed! Check QML component properties.") # –û—Å—Ç–∞–≤–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            except Exception as e:
                print(f"[MapPage] Error calling setProperty: {e}") # DEBUG 5 - –û—Å—Ç–∞–≤–∏–º –æ—à–∏–±–∫—É
        # else:
             # print(f"[DBG MapPage] Condition NOT met (fix={gps_fix}, lat={lat}, lon={lon})") # DEBUG 6

# === –ì–õ–ê–í–ù–û–ï –û–ö–ù–û ===
class MainWindow(QMainWindow):
    def __init__(self, config=None):
        super().__init__()
        self.config = config or {}
        
        # –ë—É—Ñ–µ—Ä –ø–∞–∫–µ—Ç–æ–≤
        self.buffered_packets = []
        self.last_data = None
        
        self.setWindowTitle("Telemetry Dashboard")
        
        # ‚ûï –°—Ç–∞—Ç—É—Å-–±–∞—Ä –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å–∏–º—É–ª—è—Ü–∏–∏
        self.setStatusBar(QStatusBar(self))
        self.progress_bar = QProgressBar(self)
        self.progress_bar.setRange(0, 100)
        self.progress_bar.setTextVisible(False) # Hide percentage text
        self.progress_bar.setFixedHeight(8) # Make it slim
        self.progress_bar.setStyleSheet(f"""
            QProgressBar {{
                background-color: {COLORS['bg_panel']};
                border-radius: 4px;
                border: 1px solid {COLORS['chart_grid']};
            }}
            QProgressBar::chunk {{
                background-color: {COLORS['accent']};
                border-radius: 3px;
            }}
        """)
        self.progress_bar.hide() # Initially hidden
        
        # Optionally remove status bar if nothing else uses it
        # self.setStatusBar(None) 
        
        self.resize(1200, 800)
        # self.showMaximized() # Alternative: start maximized
        self.setWindowTitle("–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ")
        # Remove placeholder label if it exists from previous versions
        # label = QLabel("–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", self)
        # label.setAlignment(Qt.AlignCenter)
        # self.setCentralWidget(label)
        label = QLabel("–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", self)
        label.setAlignment(Qt.AlignCenter)
        self.setCentralWidget(label)
        apply_dark_theme(QApplication.instance())

        # Pages
        self.tel     = TelemetryPage(self.config)
        self.graphs   = GraphsPage(self.config)  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ GraphsPage
        self.log_page = LogPage()
        self.settings = SettingsPage()
        self.console  = ConsolePage()
        self.map_page = MapPage()

        # Layout: sidebar + content
        main_widget = QWidget()
        main_layout = QHBoxLayout(main_widget)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)

        # Sidebar
        sidebar = QWidget()
        sidebar.setFixedWidth(220)
        sidebar.setStyleSheet(f"background-color: {COLORS['bg_main']};")
        sidebar_layout = QVBoxLayout(sidebar)
        sidebar_layout.setContentsMargins(15, 30, 15, 20)
        sidebar_layout.setSpacing(10)

        menu_items = [
            {"name": "Telemetry", "icon": "üìä", "index": 0},
            {"name": "Graphs",    "icon": "üìà", "index": 1},
            {"name": "Logs",      "icon": "üìù", "index": 2},
            {"name": "Settings",  "icon": "‚öôÔ∏è", "index": 3},
            {"name": "Console",   "icon": "üíª", "index": 4},
            {"name": "Map",       "icon": "üó∫Ô∏è", "index": 5}
        ]
        self.nav_buttons = []
        for item in menu_items:
            btn = QPushButton(f" {item['icon']} {item['name']}")
            btn.setProperty("index", item["index"])
            btn.setCheckable(True)
            btn.setStyleSheet(f"""
                QPushButton {{
                    text-align: left;
                    padding: 12px 15px;
                    border-radius: 8px;
                    color: {COLORS['text_primary']};
                    background: transparent;
                    font-size: 14px;
                }}
                QPushButton:hover {{
                    background: {COLORS['accent_darker']};
                    color: {COLORS['text_primary']};
                }}
                QPushButton:checked {{
                    background: {COLORS['accent']};
                    color: white;
                    font-weight: bold;
                }}
            """)
            btn.clicked.connect(lambda _, idx=item["index"], b=btn: self.on_nav_click(idx, b))
            self.nav_buttons.append(btn)
            sidebar_layout.addWidget(btn)

        sidebar_layout.addStretch(1) # Add stretch before version/progress
        # ‚ûï –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–Ω–∏–∑—É –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        ver_lbl = QLabel(f"Version {APP_VERSION} release")
        ver_lbl.setStyleSheet(f"color: {COLORS['text_secondary']}; font-size: 8pt;")
        ver_lbl.setAlignment(Qt.AlignCenter)
        sidebar_layout.addWidget(ver_lbl)
        # Add progress bar below version
        sidebar_layout.addWidget(self.progress_bar)

        self.nav_buttons[0].setChecked(True) # Check first item after adding all widgets
        main_layout.addWidget(sidebar)

        # –∑–∞—Å—Ç–∞–≤–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç—å –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π space, –ø–æ—Ç–æ–º QStackedWidget
        self.stack = QStackedWidget()
        self.stack.setStyleSheet("background: transparent;")


        # Content: –ø–æ–º–µ—â–∞–µ–º —Ñ–æ–Ω –∏ —Å—Ç–µ–∫ –≤ –æ–¥–Ω—É —è—á–µ–π–∫—É grid, —á—Ç–æ–±—ã –Ω–∞–ª–æ–∂–∏—Ç—å –∏—Ö –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞
        content_area = QWidget()
        grid = QGridLayout(content_area)
        grid.setContentsMargins(20, 20, 20, 20)
        grid.setSpacing(0)

        # 1) —Ñ–æ–Ω
        self.bg_anim = QQuickWidget(content_area)
        self.bg_anim.setClearColor(Qt.transparent)
        self.bg_anim.setAttribute(Qt.WA_TranslucentBackground)
        self.bg_anim.setStyleSheet("background: transparent;")
        self.bg_anim.setResizeMode(QQuickWidget.SizeRootObjectToView)
        grad = os.path.join(BASE_PATH, "gradient.qml")
        self.bg_anim.setSource(QUrl.fromLocalFile(grad))
        grid.addWidget(self.bg_anim, 0, 0)

        # 2) –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–µ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü ‚Äî –ø–æ–≤–µ—Ä—Ö —Ñ–æ–Ω–∞
        # –¥–µ–ª–∞–µ–º —Å—Ç–µ–∫ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏, —á—Ç–æ–±—ã QQuickWidget-–≥—Ä–∞–¥–∏–µ–Ω—Ç –±—ã–ª –∑–∞ –Ω–∏–º–∏
        self.stack = QStackedWidget(content_area)
        self.stack.setAttribute(Qt.WA_TranslucentBackground)
        for page in (self.tel, self.graphs, self.log_page, self.settings, self.console, self.map_page):
            # –ù–µ –¥–µ–ª–∞–µ–º TelemetryPage –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π, —á—Ç–æ–±—ã –µ–µ –¥–æ—á–µ—Ä–Ω–∏–µ —Å—Ç–∏–ª–∏ —Ä–∞–±–æ—Ç–∞–ª–∏
            if page is not self.tel:
                 page.setAttribute(Qt.WA_TranslucentBackground)
            self.stack.addWidget(page)
        grid.addWidget(self.stack, 0, 0)

        # —Ä–∞—Å—Ç—è–Ω—É—Ç—å –æ–±–∞ –Ω–∞ –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π space
        grid.setRowStretch(0, 1)
        grid.setColumnStretch(0, 1)
        main_layout.addWidget(content_area)

        self.setCentralWidget(main_widget)

        # Telemetry worker ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º —Å–Ω–∞—á–∞–ª–∞ config, –ø–æ—Ç–æ–º –ø–æ—Ä—Ç –∏ baudrate
        self.worker = TelemetryWorker(self.config, "COM3", 9600)

        # –ë—É—Ñ–µ—Ä –ø–∞–∫–µ—Ç–æ–≤ –∏ —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ UI-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.ui_timer = QTimer(self)
        self.ui_timer.timeout.connect(self.flush_buffered_packets)
        self.ui_timer.start(100)  # –æ–±–Ω–æ–≤–ª—è—Ç—å UI –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 50 ms

        # ‚ûï –ü—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ ‚Äî —á–µ–∫–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –±—É—Ñ–µ—Ä
        self.worker.sim_ended.connect(self.graphs.reset_charts)
        self.worker.sim_ended.connect(lambda: (
            self.tel.pause_btn.setText("‚è∏ –ü–∞—É–∑–∞"),
            self.tel.pause_btn.setEnabled(False)
        ))
        self.worker.sim_ended.connect(lambda: self.buffered_packets.clear())
        self.worker.sim_ended.connect(self._on_simulation_ended) # Connect sim end to hide progress
        # --- –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ --- (–î–æ–±–∞–≤–ª–µ–Ω–æ)
        self.worker.sim_ended.connect(lambda: self.notify("–§–∞–π–ª —Å–∏–º—É–ª—è—Ü–∏–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω", "info"))

        self.tel.set_worker(self.worker)
        self.worker.data_ready.connect(self._on_data_ready)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º _on_data_ready –¥–ª—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏
        self.worker.log_ready.connect(self.log_page.add_log_message)
        self.map_page.set_worker(self.worker)
        self.worker.error_crc.connect(QApplication.beep)
        # Connect progress signal
        self.worker.simulation_progress.connect(self._on_simulation_progress)
        # --- –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫ —Å–ª–æ—Ç—É notify --- (–î–æ–±–∞–≤–ª–µ–Ω–æ)
        self.worker.notification_requested.connect(self.notify)

        # --- –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –Ω–æ–≤–æ–º—É —Å–ª–æ—Ç—É --- 
        self.settings.settings_changed.connect(self._on_settings_or_mode_changed)
        # self.settings.simulator_changed.connect(self._on_settings_or_mode_changed) # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤

        # --- –ü–æ–¥–∫–ª—é—á–∞–µ–º sim_ended –∫ —Å–±—Ä–æ—Å—É —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ --- 
        self.worker.sim_ended.connect(self.tel.clear_values)

        # –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤
        self.log_page.configure_auto_save(
            self.settings.auto_save_chk.isChecked(),
            self.settings.auto_save_spin.value()
        )
        self.settings.auto_save_chk.stateChanged.connect(
            lambda s: self.log_page.configure_auto_save(
                bool(s), self.settings.auto_save_spin.value()
            )
        )
        self.settings.auto_save_spin.valueChanged.connect(
            lambda v: self.log_page.configure_auto_save(
                self.settings.auto_save_chk.isChecked(), v
            )
        )

        # Start
        print("[UI] MainWindow: about to start TelemetryWorker")
        self.worker.start()
        print("[UI] MainWindow: TelemetryWorker.start() called")
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–∏–º—É–ª—è—Ü–∏–∏
        self.worker.simulation_progress.connect(self._on_simulation_progress)
        self.worker.sim_ended.connect(lambda: self.progress_bar.reset())
        # –°—Ä–∞–∑—É —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (–±—É–¥–µ—Ç –≤–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è)
        self.progress_bar.setVisible(self.stack.currentIndex() == 0)

        # ‚Äî –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ ‚Äî
        # Ctrl+P ‚Äî –ø–∞—É–∑–∞/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        sc_pause = QShortcut(QKeySequence("Ctrl+P"), self)
        sc_pause.activated.connect(lambda: self.tel.pause_btn.click())
        # Ctrl+S ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤
        sc_export = QShortcut(QKeySequence("Ctrl+S"), self)
        sc_export.activated.connect(self.log_page.export_logs)
        # Ctrl+R ‚Äî —Å–±—Ä–æ—Å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ (reset layout)
        sc_reset = QShortcut(QKeySequence("Ctrl+R"), self)
        sc_reset.activated.connect(self.settings._reset_graph_layout)
        # –ß—Ç–æ–±—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –≤—ã–ª–µ–∑–∞–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
        self.settings.save_settings()
        self.console.command_entered.connect(self._handle_console_command)
        sc_profile = QShortcut(QKeySequence("Ctrl+I"), self)
        sc_profile.activated.connect(self.print_profile)

        # —Ç–µ–ø–µ—Ä—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞–ª–µ–Ω—å–∫–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏ –≤ TelemetryPage
        self.worker.data_ready.connect(self.tel.update_values)

    def print_profile(self):
        import tracemalloc
        tracemalloc.start()
        # flush once
        self.flush_buffered_packets()
        print(tracemalloc.get_traced_memory())
        tracemalloc.stop()

    def show(self):
        super().show()
        self.center()
    def center(self):
        screen = QGuiApplication.primaryScreen().availableGeometry()
        geom   = self.frameGeometry()
        geom.moveCenter(screen.center())
        self.move(geom.topLeft())

    def notify(self, message: str, level: str="info"):
        n = Notification(message, level, parent=self)
        # –ø–æ–∑–∏—Ü–∏—è: –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª —Å –æ—Ç—Å—Ç—É–ø–æ–º
        x = self.geometry().right() - n.width() - 20
        y = self.geometry().bottom() - n.height() - 20
        n.move(x, y)
        n.show()

    def on_nav_click(self, idx, btn):
        for b in self.nav_buttons:
            b.setChecked(False)
        btn.setChecked(True)
        self.stack.setCurrentIndex(idx)
        # Show progress bar only when Telemetry tab (index 0) is active
        is_telemetry_tab = (idx == 0)
        is_sim_running = self.worker.sim_enabled and self.progress_bar.value() < self.progress_bar.maximum()
        self.progress_bar.setVisible(is_telemetry_tab and is_sim_running)

        # –≤—Å–µ —Ç—è–∂—ë–ª—ã–µ –≤–µ—â–∏ ‚Äî —á–µ—Ä–µ–∑ QTimer.singleShot(0,‚Ä¶)
        QTimer.singleShot(0, self._start_simulation)

    def _start_simulation(self):
        # 1) —Å–Ω–∏–º–µ–º –ø–∞—É–∑—É
        self.worker.resume()
        # 2) —Å–±—Ä–æ—Å–∏–º UI-–±—É—Ñ–µ—Ä
        self.buffered_packets.clear()
        # 3) –æ—á–∏—Å—Ç–∏–º –≥—Ä–∞—Ñ–∏–∫–∏
        #self.graphs.reset_charts()
        # 4) –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É Pause –¥–æ –Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Ö–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        self.tel.pause_btn.setEnabled(False)
        # Reset progress bar, but don't show it yet.
        # It will become visible in _on_simulation_progress when data arrives.
        if self.worker.sim_enabled: # Reset only if sim mode is on
            self.progress_bar.reset() # Reset progress on start

    def closeEvent(self, event):
        # save graph layout
        try:
            self.graphs.save_layout()
        except Exception:
            pass
        self.worker.stop()
        self.worker.wait(1000)
        super().closeEvent(event)

    def flush_buffered_packets(self):
        # –°–æ–∑–¥–∞–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é –±—É—Ñ–µ—Ä–∞ –∏ –æ—á–∏—Å—Ç–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª,
        # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ –¥–∞–Ω–Ω—ã—Ö
        packets = list(self.buffered_packets)
        self.buffered_packets.clear()
        
        # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞ - –æ–±–Ω–æ–≤–∏–º –≥—Ä–∞—Ñ–∏–∫–∏
        if hasattr(self, 'graphs') and self.graphs is not None:
            for p in packets:
                try:
                    self.graphs.update_charts(p)
                except Exception as e:
                    print(f"[UI] flush_buffered_packets error: {e}")
        
        # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–∞ - –æ–±–Ω–æ–≤–∏–º –µ—ë –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–∞–∫–µ—Ç–æ–º
        if packets and hasattr(self, 'tel') and self.tel is not None:
            try:
                self.tel.update_values(packets[-1]) # Use only the last packet
            except Exception as e:
                print(f"[UI] flush_buffered_packets error (telemetry): {e}")
        
        # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
        if packets:
            self.last_data = packets[-1]

    @Slot(bool, str)
    def on_simulator_changed(self, enabled: bool, filepath: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ñ–∞–π–ª–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ - –¢–ï–ü–ï–†–¨ –¢–û–õ–¨–ö–û –ó–ê–ü–£–°–ö–ê–ï–¢ –°–¢–ê–†–¢."""
        # –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è worker'–∞ –∏ —Å–±—Ä–æ—Å–∞ UI –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ _on_settings_or_mode_changed
        # –≠—Ç–æ—Ç —Å–ª–æ—Ç —Ç–µ–ø–µ—Ä—å –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –≤–∫–ª—é—á–µ–Ω–∞
        print(f"[UI] on_simulator_changed called (enabled={enabled})") # Debug
        if enabled:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É UI –∏ —Å—Ç–∞—Ä—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ (–µ—Å–ª–∏ –æ–Ω–∞ –≤–∫–ª—é—á–µ–Ω–∞)
            QTimer.singleShot(0, self._start_simulation)
            # –°–±—Ä–æ—Å UI –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —á–µ—Ä–µ–∑ _on_settings_or_mode_changed

    @Slot(int, int)
    def _on_simulation_progress(self, pos: int, total: int):
        """–û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö."""
        pct = int(pos * 100 / total) if total else 0
        self.progress_bar.setValue(pct)
        # Show the progress bar ONLY if the telemetry tab is active
        if self.stack.currentIndex() == 0:
            self.progress_bar.show()

    # Add a new slot to handle simulation end signal
    @Slot()
    def _on_simulation_ended(self):
        """–°–ª–æ—Ç, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–º–∏—Ç–∞—Ü–∏–∏."""
        print("[UI] Simulation ended signal received.")
        self.progress_bar.hide()
        self.progress_bar.reset()
        self._sim_running = False
        # Optionally notify user
        # self.notify("–ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "info")

    @Slot()
    def toggle_pause_shortcut(self):
        # –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–∞—É–∑—É —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∫–Ω–æ–ø–∫–∞
        if self.worker.is_paused():
            self.worker.resume()
            self.log_page.add_log_message("[INFO] Resumed via Ctrl+P")
        else:
            self.worker.pause()
            self.log_page.add_log_message("[INFO] Paused via Ctrl+P")
    @Slot(str)
    def _handle_console_command(self, cmd: str):
        cmd = cmd.lower()
        # help
        if cmd in ("help", "?"):
            cmds = {
                "pause":          "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–µ–º –¥–∞–Ω–Ω—ã—Ö",
                "resume":         "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–µ–º",
                "version":        "–≤–µ—Ä—Å–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã",
                "errors":         "–ø–æ–∫–∞–∑–∞—Ç—å WARN/ERROR",
                "help":           "—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
                "clear logs":     "–æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥",
                "clear errors":   "–æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫",
                "exit / quit":    "–≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                "export report":  "—ç–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞ HTML/PDF",
                "export logs":    "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥ –≤ —Ñ–∞–π–ª",
                "export zip":     "—ç–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ ZIP",
                "load bin <—Ñ–∞–π–ª>":"–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∏–Ω–∞—Ä–Ω–∏–∫ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏",
                "udp enable":     "–≤–∫–ª—é—á–∏—Ç—å UDP —Ä–µ–∂–∏–º",
                "udp disable":    "–≤—ã–∫–ª—é—á–∏—Ç—å UDP —Ä–µ–∂–∏–º",
                "ping":           "–ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É UDP",
                "sensor info":    "–ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤",
                "log <—Ç–µ–∫—Å—Ç>":    "–¥–æ–±–∞–≤–∏—Ç—å –≤ –ª–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                "simulate error": "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å CRC-–æ—à–∏–±–∫—É",
                "fps":            "–ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π FPS",
                "events":         "–≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –º–∏—Å—Å–∏–∏",
            }
            hotkeys = {
                "Ctrl+P": "Pause/Resume",
                "Ctrl+S": "Export logs ZIP",
                "Ctrl+R": "Reset graph layout"
            }
            self.console.write_response("Commands:")
            for k,v in cmds.items():
                self.console.write_response(f"  {k:<7} ‚Äî {v}")
            self.console.write_response("Hotkeys:")
            for k,v in hotkeys.items():
                self.console.write_response(f"  {k:<7} ‚Äî {v}")
            return

        # ---------------- new commands ----------------
        if cmd == "clear logs":
            self.log_page.clear_log()
            self.console.write_response("Logs cleared")
            return
        if cmd == "clear errors":
            self.log_page.error_list.clear()
            self.console.write_response("Errors cleared")
            return
        if cmd in ("exit", "quit"):
            self.console.write_response("Exiting‚Ä¶")
            QTimer.singleShot(100, QApplication.instance().quit)
            return
        if cmd == "export report":
            self.log_page.export_report()
            self.console.write_response("Report export triggered")
            return
        if cmd == "export logs":
            self.log_page.save_log()
            self.console.write_response("Logs save triggered")
            return
        if cmd == "export zip":
            self.log_page.export_logs()
            self.console.write_response("ZIP export triggered")
            return
        if cmd.startswith("load bin "):
            path = cmd[len("load bin "):].strip()
            self.on_simulator_changed(True, path)
            self.console.write_response(f"Simulation file set to {path}")
            return
        if cmd == "udp enable":
            self.settings.udp_enable.setChecked(True)
            # –û—Ç–∫–ª—é—á–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
            self.worker.update_simulation(False, self.worker.sim_file_path)
            self.console.write_response("UDP enabled, simulation disabled")
            return
            return
        if cmd == "udp disable":
            self.settings.udp_enable.setChecked(False)
            self.console.write_response("UDP disabled")
            return
        if cmd == "ping":
            # –í—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            if hasattr(self, 'worker') and hasattr(self.worker, 'last_data_time'):
                last = self.worker.last_data_time
                if last:
                    lat = time.time() - last
                    self.console.write_response(f"UDP Latency: {lat:.2f}s")
                else:
                    self.console.write_response("UDP Latency: N/A")
            else:
                self.console.write_response("UDP Latency: N/A")
            return
        if cmd == "sensor info":
            if self.last_data:
                for k,v in self.last_data.items():
                    self.console.write_response(f"{k}: {v}")
            else:
                self.console.write_response("No sensor data yet")
            return
        if cmd.startswith("log "):
            text = cmd[len("log "):]
            self.log_page.add_log_message(f"[USER] {text}")
            self.console.write_response("Logged message")
            return
        if cmd == "simulate error":
            self.worker.error_crc.emit()
            self.console.write_response("Simulated CRC error")
            return
        if cmd == "events":
            notes = getattr(self.log_page, "mission_notes", [])
            if notes:
                for n in notes:
                    self.console.write_response(n)
            else:
                self.console.write_response("No mission events")
            return

        # version
        if cmd == "version":
            self.console.write_response(f"Grib Telemetry Dashboard v{APP_VERSION} ‚Äî program 'Norfa'")
            return
        # pause/resume without data-check
        if cmd in ("pause", "resume"):
            if cmd == "pause":
                self.tel.pause_btn.click()
                self.log_page.add_log_message("[INFO] Telemetry paused via console")
                self.console.write_response("OK: paused (button clicked)")
            else:
                self.tel.pause_btn.click()
                self.console.write_response("OK: resumed (button clicked)")
            return

        # show errors/warnings from log
        if cmd in ("errors", "show errors", "warnings"):
            errs = self.log_page.get_errors()
            if not errs:
                self.console.write_response("No warnings or errors.")
            for e in errs:
                self.console.write_response(e)
            return

        self.console.write_response(f"Unknown command: {cmd}")

    def _on_data_ready(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ TelemetryWorker."""
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
        self.buffered_packets.append(data)
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–∞—É–∑—ã –≤ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
        if hasattr(self, 'tel') and hasattr(self.tel, 'pause_btn') and not self.tel.pause_btn.isEnabled():
            self.tel.pause_btn.setEnabled(True)

    # --- –ù–æ–≤—ã–π —Å–ª–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞/–Ω–∞—Å—Ç—Ä–æ–µ–∫ --- (–î–æ–±–∞–≤–ª–µ–Ω–æ)
    @Slot()
    def _on_settings_or_mode_changed(self):
         """–°–ª–æ—Ç, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ UDP –∏–ª–∏ –°–∏–º—É–ª—è—Ü–∏–∏."""
         # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –∏–∑–º–µ–Ω–µ–Ω–∏—è
         udp_was_enabled = self.worker.udp_enabled
         sim_was_enabled = self.worker.sim_enabled
         print(f"[UI DBG] Before change: UDP={udp_was_enabled}, SIM={sim_was_enabled}") # Debug
 
         # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –≤–∏–¥–∂–µ—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫
         udp_now_enabled = self.settings.udp_enable.isChecked()
         sim_now_enabled = self.settings.sim_enable.isChecked()
         print(f"[UI DBG] After change (checkboxes): UDP={udp_now_enabled}, SIM={sim_now_enabled}") # Debug
 
         # –û–±–Ω–æ–≤–ª—è–µ–º worker'–∞ (–æ–Ω —Å–∞–º —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è, —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)
         # –í–∞–∂–Ω–æ –¥–µ–ª–∞—Ç—å —ç—Ç–æ –¥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∏–∂–µ
         self.worker.update_udp(udp_now_enabled, self.settings.udp_ip.text(), int(self.settings.udp_port.text() or 0))
         self.worker.update_simulation(sim_now_enabled, self.settings.sim_file_path.text())

         print(f"[UI] Mode changed check: UDP={udp_now_enabled}, SIM={sim_now_enabled}") # Debug

         # --- –ù–æ–≤–æ–µ —É—Å–ª–æ–≤–∏–µ —Å–±—Ä–æ—Å–∞: –µ—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ --- 
         was_active = udp_was_enabled or sim_was_enabled
         is_active_now = udp_now_enabled or sim_now_enabled
         should_reset = was_active and not is_active_now
         print(f"[UI DBG] State check: was_active={was_active}, is_active_now={is_active_now}, should_reset={should_reset}") # Debug
 
         # –î–æ–ø. —É—Å–ª–æ–≤–∏–µ: –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω UDP, –Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ö–æ—Å—Ç/–ø–æ—Ä—Ç? (–ü–æ–∫–∞ –Ω–µ –¥–µ–ª–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º UDP)
         # if udp_now_enabled and (self.worker.udp_host != self.settings.udp_ip.text() or ...):
         if should_reset:
             print("[UI] Resetting UI due to mode change...") # Debug
             # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
             self.graphs.reset_charts()
             # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
             print("[UI DBG] Calling tel.clear_values()...") # Debug
             self.tel.clear_values()
             # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–∞—É–∑—ã
             self.tel.pause_btn.setText("‚è∏ –ü–∞—É–∑–∞")
             self.tel.pause_btn.setEnabled(False)
             # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä –ø–∞–∫–µ—Ç–æ–≤
             self.buffered_packets.clear()
             # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä —Å–∏–º—É–ª—è—Ü–∏–∏
             self._on_simulation_ended() # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ—Ç —Å–ª–æ—Ç –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞

         # --- –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –≤–∫–ª—é—á–µ–Ω–∞ --- (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç—Å—Ç—É–ø—ã)
         if sim_now_enabled:
             print("[UI] Simulation enabled, queueing start...") # Debug
             QTimer.singleShot(0, self._start_simulation)

if __name__ == "__main__":
    # Force software OpenGL to avoid GPU "device removed" errors
    QGuiApplication.setAttribute(Qt.AA_UseSoftwareOpenGL)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        from tw_config import load_config
        config = load_config()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        config = {}  # –ü—É—Å—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
    
    app = QApplication(sys.argv)
    splash = SplashScreen(config)
    QTimer.singleShot(0, splash.show)
    exit_code = app.exec() 
    sys.exit(exit_code)